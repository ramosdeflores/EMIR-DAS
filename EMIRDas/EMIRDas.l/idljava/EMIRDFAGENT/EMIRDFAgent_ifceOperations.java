package EMIRDFAGENT;


/**
* EMIRDFAGENT/EMIRDFAgent_ifceOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from EMIRDFAGENT.idl
* lunes 18 de mayo de 2015 13H54' WEST
*/

public interface EMIRDFAgent_ifceOperations  extends DFAGENT.DFAgent_ifceOperations
{

  // Specific EMIRDFAgent operations
  void setObsMode (EMIRDFAGENT.ObservationMode obsMode) throws DGT.GCSException;
  void setNumberOfImagesToCollect (int value) throws DGT.GCSException;
  void setNumberOfReadsInAPoint (int value) throws DGT.GCSException;

  //			raises (DGT::GCSException);
  void setFilterName (String filter, short position) throws DGT.GCSException;
  void setGrismName (String grism) throws DGT.GCSException;
  void setCSUConfFile (String file) throws DGT.GCSException;
  void endSequence (boolean value) throws DGT.GCSException;
  void setFlip (boolean value) throws DGT.GCSException;
  void setRotatorOffset (double value) throws DGT.GCSException;
  void setReferencePixel (double pixelX, double pixelY) throws DGT.GCSException;
  void setPlateScale (double value) throws DGT.GCSException;
  void setInstrumentPositionAngle (double value) throws DGT.GCSException;
  void setDetectorPositionAngle (double value) throws DGT.GCSException;
  void setDTUPositionAngle (double value) throws DGT.GCSException;
  void setFocalPlanePositionAngle (double value) throws DGT.GCSException;
  void setPixelSizeAtDetector (double value) throws DGT.GCSException;
  void setPixelSizeAtFocalPlane (double value) throws DGT.GCSException;
  void setDTU_FOV (int valueX, int valueY, int valueZ) throws DGT.GCSException;
  void setDTU_Factor (int valueX, int valueY, int valueZ) throws DGT.GCSException;
  void setDTU_Commanded (int valueX, int valueY, int valueZ) throws DGT.GCSException;
  void setCoordinateType (String value) throws DGT.GCSException;
  void setCRVAL (double alfa, double delta) throws DGT.GCSException;
  void setDetectorCenter (int valueX, int valueY) throws DGT.GCSException;
  void setNumberCycle (String value) throws DGT.GCSException;
  void setCryiostateVersion (String value) throws DGT.GCSException;
  void setNumObservingBlock (int numTotalObservingBlocks, int numActualObservingBlock, int numTotalImagesInObsBlock, int numActualImageInObsBlock) throws DGT.GCSException;
  void setNumTotalObservingBlocks (int value) throws DGT.GCSException;
  void setNumActualObservingBlock (int value) throws DGT.GCSException;
  void setNumTotalImagesInObsBlock (int value) throws DGT.GCSException;
  void setNumActualImageInObsBlock (int value) throws DGT.GCSException;

  // Monitorable attributes (device magnitudes)
  EMIRDFAGENT.ObservationMode obsMode ();
  boolean isReceivingImageFinished ();

  // Configurable attributes (device properties)
  String observingEngineInstanceName ();

  // Configurable attributes (device properties)
  void observingEngineInstanceName (String newObservingEngineInstanceName);
  String dfManagerInstanceName ();
  void dfManagerInstanceName (String newDfManagerInstanceName);
  String dtuInstanceName ();
  void dtuInstanceName (String newDtuInstanceName);
  String emirInstanceName ();
  void emirInstanceName (String newEmirInstanceName);
  String flatsPath ();
  void flatsPath (String newFlatsPath);
  String biasPath ();
  void biasPath (String newBiasPath);
  String darksPath ();
  void darksPath (String newDarksPath);
  String skyPath ();
  void skyPath (String newSkyPath);
  String pinholesPath ();
  void pinholesPath (String newPinholesPath);
  String latitude ();
  void latitude (String newLatitude);
  String longitude ();
  void longitude (String newLongitude);
  String telescopeName ();
  void telescopeName (String newTelescopeName);
  String originFITS ();
  void originFITS (String newOriginFITS);
  String observatoryName ();
  void observatoryName (String newObservatoryName);
  short recenter ();
  void recenter (short newRecenter);
  double max_recenter_radius ();
  void max_recenter_radius (double newMax_recenter_radius);
} // interface EMIRDFAgent_ifceOperations
