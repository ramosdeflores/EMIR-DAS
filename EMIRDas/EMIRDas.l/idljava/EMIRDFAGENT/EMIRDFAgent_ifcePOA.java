package EMIRDFAGENT;


/**
* EMIRDFAGENT/EMIRDFAgent_ifcePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from EMIRDFAGENT.idl
* lunes 18 de mayo de 2015 13H54' WEST
*/

public abstract class EMIRDFAgent_ifcePOA extends org.omg.PortableServer.Servant
 implements EMIRDFAGENT.EMIRDFAgent_ifceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("setObsMode", new java.lang.Integer (0));
    _methods.put ("setNumberOfImagesToCollect", new java.lang.Integer (1));
    _methods.put ("setNumberOfReadsInAPoint", new java.lang.Integer (2));
    _methods.put ("setFilterName", new java.lang.Integer (3));
    _methods.put ("setGrismName", new java.lang.Integer (4));
    _methods.put ("setCSUConfFile", new java.lang.Integer (5));
    _methods.put ("endSequence", new java.lang.Integer (6));
    _methods.put ("setFlip", new java.lang.Integer (7));
    _methods.put ("setRotatorOffset", new java.lang.Integer (8));
    _methods.put ("setReferencePixel", new java.lang.Integer (9));
    _methods.put ("setPlateScale", new java.lang.Integer (10));
    _methods.put ("setInstrumentPositionAngle", new java.lang.Integer (11));
    _methods.put ("setDetectorPositionAngle", new java.lang.Integer (12));
    _methods.put ("setDTUPositionAngle", new java.lang.Integer (13));
    _methods.put ("setFocalPlanePositionAngle", new java.lang.Integer (14));
    _methods.put ("setPixelSizeAtDetector", new java.lang.Integer (15));
    _methods.put ("setPixelSizeAtFocalPlane", new java.lang.Integer (16));
    _methods.put ("setDTU_FOV", new java.lang.Integer (17));
    _methods.put ("setDTU_Factor", new java.lang.Integer (18));
    _methods.put ("setDTU_Commanded", new java.lang.Integer (19));
    _methods.put ("setCoordinateType", new java.lang.Integer (20));
    _methods.put ("setCRVAL", new java.lang.Integer (21));
    _methods.put ("setDetectorCenter", new java.lang.Integer (22));
    _methods.put ("setNumberCycle", new java.lang.Integer (23));
    _methods.put ("setCryiostateVersion", new java.lang.Integer (24));
    _methods.put ("setNumObservingBlock", new java.lang.Integer (25));
    _methods.put ("setNumTotalObservingBlocks", new java.lang.Integer (26));
    _methods.put ("setNumActualObservingBlock", new java.lang.Integer (27));
    _methods.put ("setNumTotalImagesInObsBlock", new java.lang.Integer (28));
    _methods.put ("setNumActualImageInObsBlock", new java.lang.Integer (29));
    _methods.put ("_get_obsMode", new java.lang.Integer (30));
    _methods.put ("_get_isReceivingImageFinished", new java.lang.Integer (31));
    _methods.put ("_get_observingEngineInstanceName", new java.lang.Integer (32));
    _methods.put ("_set_observingEngineInstanceName", new java.lang.Integer (33));
    _methods.put ("_get_dfManagerInstanceName", new java.lang.Integer (34));
    _methods.put ("_set_dfManagerInstanceName", new java.lang.Integer (35));
    _methods.put ("_get_dtuInstanceName", new java.lang.Integer (36));
    _methods.put ("_set_dtuInstanceName", new java.lang.Integer (37));
    _methods.put ("_get_emirInstanceName", new java.lang.Integer (38));
    _methods.put ("_set_emirInstanceName", new java.lang.Integer (39));
    _methods.put ("_get_flatsPath", new java.lang.Integer (40));
    _methods.put ("_set_flatsPath", new java.lang.Integer (41));
    _methods.put ("_get_biasPath", new java.lang.Integer (42));
    _methods.put ("_set_biasPath", new java.lang.Integer (43));
    _methods.put ("_get_darksPath", new java.lang.Integer (44));
    _methods.put ("_set_darksPath", new java.lang.Integer (45));
    _methods.put ("_get_skyPath", new java.lang.Integer (46));
    _methods.put ("_set_skyPath", new java.lang.Integer (47));
    _methods.put ("_get_pinholesPath", new java.lang.Integer (48));
    _methods.put ("_set_pinholesPath", new java.lang.Integer (49));
    _methods.put ("_get_latitude", new java.lang.Integer (50));
    _methods.put ("_set_latitude", new java.lang.Integer (51));
    _methods.put ("_get_longitude", new java.lang.Integer (52));
    _methods.put ("_set_longitude", new java.lang.Integer (53));
    _methods.put ("_get_telescopeName", new java.lang.Integer (54));
    _methods.put ("_set_telescopeName", new java.lang.Integer (55));
    _methods.put ("_get_originFITS", new java.lang.Integer (56));
    _methods.put ("_set_originFITS", new java.lang.Integer (57));
    _methods.put ("_get_observatoryName", new java.lang.Integer (58));
    _methods.put ("_set_observatoryName", new java.lang.Integer (59));
    _methods.put ("_get_recenter", new java.lang.Integer (60));
    _methods.put ("_set_recenter", new java.lang.Integer (61));
    _methods.put ("_get_max_recenter_radius", new java.lang.Integer (62));
    _methods.put ("_set_max_recenter_radius", new java.lang.Integer (63));
    _methods.put ("setPrincipalInvestigatorName", new java.lang.Integer (64));
    _methods.put ("setObservationType", new java.lang.Integer (65));
    _methods.put ("setObservationClass", new java.lang.Integer (66));
    _methods.put ("setInstrumentMode", new java.lang.Integer (67));
    _methods.put ("setObserverName", new java.lang.Integer (68));
    _methods.put ("setObjectName", new java.lang.Integer (69));
    _methods.put ("getObjectName", new java.lang.Integer (70));
    _methods.put ("setProgramId", new java.lang.Integer (71));
    _methods.put ("setESOProgramId", new java.lang.Integer (72));
    _methods.put ("setObservationBlockId", new java.lang.Integer (73));
    _methods.put ("setImageTitle", new java.lang.Integer (74));
    _methods.put ("setObservationComment", new java.lang.Integer (75));
    _methods.put ("setObsModeLowLevel", new java.lang.Integer (76));
    _methods.put ("setPropagateFrame", new java.lang.Integer (77));
    _methods.put ("setSaveFrame", new java.lang.Integer (78));
    _methods.put ("setPropagateFITS", new java.lang.Integer (79));
    _methods.put ("setSaveFITS", new java.lang.Integer (80));
    _methods.put ("createArchiveFits", new java.lang.Integer (81));
    _methods.put ("importFitsFile", new java.lang.Integer (82));
    _methods.put ("commitArchiveFits", new java.lang.Integer (83));
    _methods.put ("setAutoReduce", new java.lang.Integer (84));
    _methods.put ("setWriteKeywords", new java.lang.Integer (85));
    _methods.put ("setReductionRecipe", new java.lang.Integer (86));
    _methods.put ("commitOR", new java.lang.Integer (87));
    _methods.put ("_get_doesSaveFrame", new java.lang.Integer (88));
    _methods.put ("_get_doesPropagateFrame", new java.lang.Integer (89));
    _methods.put ("_get_doesSaveFITS", new java.lang.Integer (90));
    _methods.put ("_get_doesPropagateFITS", new java.lang.Integer (91));
    _methods.put ("_get_doesAutoReduce", new java.lang.Integer (92));
    _methods.put ("_get_doesWriteKeywords", new java.lang.Integer (93));
    _methods.put ("_get_offlineImagesPath", new java.lang.Integer (94));
    _methods.put ("_set_offlineImagesPath", new java.lang.Integer (95));
    _methods.put ("_get_dfBranchInstanceName", new java.lang.Integer (96));
    _methods.put ("_set_dfBranchInstanceName", new java.lang.Integer (97));
    _methods.put ("_get_dfAgentPartnerInstanceName", new java.lang.Integer (98));
    _methods.put ("_set_dfAgentPartnerInstanceName", new java.lang.Integer (99));
    _methods.put ("_get_propagateFrame", new java.lang.Integer (100));
    _methods.put ("_set_propagateFrame", new java.lang.Integer (101));
    _methods.put ("_get_saveFrame", new java.lang.Integer (102));
    _methods.put ("_set_saveFrame", new java.lang.Integer (103));
    _methods.put ("_get_propagateFITS", new java.lang.Integer (104));
    _methods.put ("_set_propagateFITS", new java.lang.Integer (105));
    _methods.put ("_get_saveFITS", new java.lang.Integer (106));
    _methods.put ("_set_saveFITS", new java.lang.Integer (107));
    _methods.put ("_get_autoReduce", new java.lang.Integer (108));
    _methods.put ("_set_autoReduce", new java.lang.Integer (109));
    _methods.put ("_get_writeKeywords", new java.lang.Integer (110));
    _methods.put ("_set_writeKeywords", new java.lang.Integer (111));
    _methods.put ("_get_flippedImage", new java.lang.Integer (112));
    _methods.put ("_set_flippedImage", new java.lang.Integer (113));
    _methods.put ("_get_testingMode", new java.lang.Integer (114));
    _methods.put ("_set_testingMode", new java.lang.Integer (115));
    _methods.put ("_get_obsModeKeywordListPath", new java.lang.Integer (116));
    _methods.put ("_set_obsModeKeywordListPath", new java.lang.Integer (117));
    _methods.put ("_get_recipeDictionaryPath", new java.lang.Integer (118));
    _methods.put ("_set_recipeDictionaryPath", new java.lang.Integer (119));
    _methods.put ("_get_gcsComponent", new java.lang.Integer (120));
    _methods.put ("_set_gcsComponent", new java.lang.Integer (121));
    _methods.put ("_get_cameraName", new java.lang.Integer (122));
    _methods.put ("_set_cameraName", new java.lang.Integer (123));
    _methods.put ("_get_referencePixel", new java.lang.Integer (124));
    _methods.put ("_set_referencePixel", new java.lang.Integer (125));
    _methods.put ("enable", new java.lang.Integer (126));
    _methods.put ("disable", new java.lang.Integer (127));
    _methods.put ("start", new java.lang.Integer (128));
    _methods.put ("init", new java.lang.Integer (129));
    _methods.put ("halt", new java.lang.Integer (130));
    _methods.put ("shutdown", new java.lang.Integer (131));
    _methods.put ("restore", new java.lang.Integer (132));
    _methods.put ("abort", new java.lang.Integer (133));
    _methods.put ("reset", new java.lang.Integer (134));
    _methods.put ("test", new java.lang.Integer (135));
    _methods.put ("configure", new java.lang.Integer (136));
    _methods.put ("ping", new java.lang.Integer (137));
    _methods.put ("report", new java.lang.Integer (138));
    _methods.put ("internals", new java.lang.Integer (139));
    _methods.put ("isOff", new java.lang.Integer (140));
    _methods.put ("isStarting", new java.lang.Integer (141));
    _methods.put ("isShuttingDown", new java.lang.Integer (142));
    _methods.put ("isOn", new java.lang.Integer (143));
    _methods.put ("isInitialising", new java.lang.Integer (144));
    _methods.put ("isHalting", new java.lang.Integer (145));
    _methods.put ("isIdle", new java.lang.Integer (146));
    _methods.put ("isRunning", new java.lang.Integer (147));
    _methods.put ("isDisabled", new java.lang.Integer (148));
    _methods.put ("isFault", new java.lang.Integer (149));
    _methods.put ("isResetting", new java.lang.Integer (150));
    _methods.put ("isReady", new java.lang.Integer (151));
    _methods.put ("isConfigurable", new java.lang.Integer (152));
    _methods.put ("isComposite", new java.lang.Integer (153));
    _methods.put ("isIntegrated", new java.lang.Integer (154));
    _methods.put ("_get_name", new java.lang.Integer (155));
    _methods.put ("_get_className", new java.lang.Integer (156));
    _methods.put ("_get_version", new java.lang.Integer (157));
    _methods.put ("_get_state", new java.lang.Integer (158));
    _methods.put ("_get_startTime", new java.lang.Integer (159));
    _methods.put ("_get_magnitudes", new java.lang.Integer (160));
    _methods.put ("_get_properties", new java.lang.Integer (161));
    _methods.put ("_get_alarms", new java.lang.Integer (162));
    _methods.put ("_get_configuration", new java.lang.Integer (163));
    _methods.put ("_set_configuration", new java.lang.Integer (164));
    _methods.put ("startDebug", new java.lang.Integer (165));
    _methods.put ("stopDebug", new java.lang.Integer (166));
    _methods.put ("changeMonitorConfiguration", new java.lang.Integer (167));
    _methods.put ("forceSampleData", new java.lang.Integer (168));
    _methods.put ("receiveFrame", new java.lang.Integer (169));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Specific EMIRDFAgent operations
       case 0:  // EMIRDFAGENT/EMIRDFAgent_ifce/setObsMode
       {
         try {
           EMIRDFAGENT.ObservationMode obsMode = EMIRDFAGENT.ObservationModeHelper.read (in);
           this.setObsMode (obsMode);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumberOfImagesToCollect
       {
         try {
           int value = in.read_long ();
           this.setNumberOfImagesToCollect (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumberOfReadsInAPoint
       {
         try {
           int value = in.read_long ();
           this.setNumberOfReadsInAPoint (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  //			raises (DGT::GCSException);
       case 3:  // EMIRDFAGENT/EMIRDFAgent_ifce/setFilterName
       {
         try {
           String filter = in.read_string ();
           short position = in.read_short ();
           this.setFilterName (filter, position);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // EMIRDFAGENT/EMIRDFAgent_ifce/setGrismName
       {
         try {
           String grism = in.read_string ();
           this.setGrismName (grism);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // EMIRDFAGENT/EMIRDFAgent_ifce/setCSUConfFile
       {
         try {
           String file = in.read_string ();
           this.setCSUConfFile (file);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // EMIRDFAGENT/EMIRDFAgent_ifce/endSequence
       {
         try {
           boolean value = in.read_boolean ();
           this.endSequence (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // EMIRDFAGENT/EMIRDFAgent_ifce/setFlip
       {
         try {
           boolean value = in.read_boolean ();
           this.setFlip (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // EMIRDFAGENT/EMIRDFAgent_ifce/setRotatorOffset
       {
         try {
           double value = in.read_double ();
           this.setRotatorOffset (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // EMIRDFAGENT/EMIRDFAgent_ifce/setReferencePixel
       {
         try {
           double pixelX = in.read_double ();
           double pixelY = in.read_double ();
           this.setReferencePixel (pixelX, pixelY);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 10:  // EMIRDFAGENT/EMIRDFAgent_ifce/setPlateScale
       {
         try {
           double value = in.read_double ();
           this.setPlateScale (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 11:  // EMIRDFAGENT/EMIRDFAgent_ifce/setInstrumentPositionAngle
       {
         try {
           double value = in.read_double ();
           this.setInstrumentPositionAngle (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 12:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDetectorPositionAngle
       {
         try {
           double value = in.read_double ();
           this.setDetectorPositionAngle (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 13:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDTUPositionAngle
       {
         try {
           double value = in.read_double ();
           this.setDTUPositionAngle (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 14:  // EMIRDFAGENT/EMIRDFAgent_ifce/setFocalPlanePositionAngle
       {
         try {
           double value = in.read_double ();
           this.setFocalPlanePositionAngle (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 15:  // EMIRDFAGENT/EMIRDFAgent_ifce/setPixelSizeAtDetector
       {
         try {
           double value = in.read_double ();
           this.setPixelSizeAtDetector (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 16:  // EMIRDFAGENT/EMIRDFAgent_ifce/setPixelSizeAtFocalPlane
       {
         try {
           double value = in.read_double ();
           this.setPixelSizeAtFocalPlane (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 17:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDTU_FOV
       {
         try {
           int valueX = in.read_long ();
           int valueY = in.read_long ();
           int valueZ = in.read_long ();
           this.setDTU_FOV (valueX, valueY, valueZ);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 18:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDTU_Factor
       {
         try {
           int valueX = in.read_long ();
           int valueY = in.read_long ();
           int valueZ = in.read_long ();
           this.setDTU_Factor (valueX, valueY, valueZ);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 19:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDTU_Commanded
       {
         try {
           int valueX = in.read_long ();
           int valueY = in.read_long ();
           int valueZ = in.read_long ();
           this.setDTU_Commanded (valueX, valueY, valueZ);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 20:  // EMIRDFAGENT/EMIRDFAgent_ifce/setCoordinateType
       {
         try {
           String value = in.read_string ();
           this.setCoordinateType (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 21:  // EMIRDFAGENT/EMIRDFAgent_ifce/setCRVAL
       {
         try {
           double alfa = in.read_double ();
           double delta = in.read_double ();
           this.setCRVAL (alfa, delta);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 22:  // EMIRDFAGENT/EMIRDFAgent_ifce/setDetectorCenter
       {
         try {
           int valueX = in.read_long ();
           int valueY = in.read_long ();
           this.setDetectorCenter (valueX, valueY);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 23:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumberCycle
       {
         try {
           String value = in.read_string ();
           this.setNumberCycle (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 24:  // EMIRDFAGENT/EMIRDFAgent_ifce/setCryiostateVersion
       {
         try {
           String value = in.read_string ();
           this.setCryiostateVersion (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 25:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumObservingBlock
       {
         try {
           int numTotalObservingBlocks = in.read_long ();
           int numActualObservingBlock = in.read_long ();
           int numTotalImagesInObsBlock = in.read_long ();
           int numActualImageInObsBlock = in.read_long ();
           this.setNumObservingBlock (numTotalObservingBlocks, numActualObservingBlock, numTotalImagesInObsBlock, numActualImageInObsBlock);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 26:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumTotalObservingBlocks
       {
         try {
           int value = in.read_long ();
           this.setNumTotalObservingBlocks (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 27:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumActualObservingBlock
       {
         try {
           int value = in.read_long ();
           this.setNumActualObservingBlock (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 28:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumTotalImagesInObsBlock
       {
         try {
           int value = in.read_long ();
           this.setNumTotalImagesInObsBlock (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 29:  // EMIRDFAGENT/EMIRDFAgent_ifce/setNumActualImageInObsBlock
       {
         try {
           int value = in.read_long ();
           this.setNumActualImageInObsBlock (value);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Monitorable attributes (device magnitudes)
       case 30:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_obsMode
       {
         EMIRDFAGENT.ObservationMode $result = null;
         $result = this.obsMode ();
         out = $rh.createReply();
         EMIRDFAGENT.ObservationModeHelper.write (out, $result);
         break;
       }

       case 31:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_isReceivingImageFinished
       {
         boolean $result = false;
         $result = this.isReceivingImageFinished ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // Configurable attributes (device properties)
       case 32:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_observingEngineInstanceName
       {
         String $result = null;
         $result = this.observingEngineInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Configurable attributes (device properties)
       case 33:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_observingEngineInstanceName
       {
         String newObservingEngineInstanceName = in.read_string ();
         this.observingEngineInstanceName (newObservingEngineInstanceName);
         out = $rh.createReply();
         break;
       }

       case 34:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_dfManagerInstanceName
       {
         String $result = null;
         $result = this.dfManagerInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 35:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_dfManagerInstanceName
       {
         String newDfManagerInstanceName = in.read_string ();
         this.dfManagerInstanceName (newDfManagerInstanceName);
         out = $rh.createReply();
         break;
       }

       case 36:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_dtuInstanceName
       {
         String $result = null;
         $result = this.dtuInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 37:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_dtuInstanceName
       {
         String newDtuInstanceName = in.read_string ();
         this.dtuInstanceName (newDtuInstanceName);
         out = $rh.createReply();
         break;
       }

       case 38:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_emirInstanceName
       {
         String $result = null;
         $result = this.emirInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 39:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_emirInstanceName
       {
         String newEmirInstanceName = in.read_string ();
         this.emirInstanceName (newEmirInstanceName);
         out = $rh.createReply();
         break;
       }

       case 40:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_flatsPath
       {
         String $result = null;
         $result = this.flatsPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 41:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_flatsPath
       {
         String newFlatsPath = in.read_string ();
         this.flatsPath (newFlatsPath);
         out = $rh.createReply();
         break;
       }

       case 42:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_biasPath
       {
         String $result = null;
         $result = this.biasPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 43:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_biasPath
       {
         String newBiasPath = in.read_string ();
         this.biasPath (newBiasPath);
         out = $rh.createReply();
         break;
       }

       case 44:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_darksPath
       {
         String $result = null;
         $result = this.darksPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 45:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_darksPath
       {
         String newDarksPath = in.read_string ();
         this.darksPath (newDarksPath);
         out = $rh.createReply();
         break;
       }

       case 46:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_skyPath
       {
         String $result = null;
         $result = this.skyPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 47:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_skyPath
       {
         String newSkyPath = in.read_string ();
         this.skyPath (newSkyPath);
         out = $rh.createReply();
         break;
       }

       case 48:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_pinholesPath
       {
         String $result = null;
         $result = this.pinholesPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 49:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_pinholesPath
       {
         String newPinholesPath = in.read_string ();
         this.pinholesPath (newPinholesPath);
         out = $rh.createReply();
         break;
       }

       case 50:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_latitude
       {
         String $result = null;
         $result = this.latitude ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 51:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_latitude
       {
         String newLatitude = in.read_string ();
         this.latitude (newLatitude);
         out = $rh.createReply();
         break;
       }

       case 52:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_longitude
       {
         String $result = null;
         $result = this.longitude ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 53:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_longitude
       {
         String newLongitude = in.read_string ();
         this.longitude (newLongitude);
         out = $rh.createReply();
         break;
       }

       case 54:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_telescopeName
       {
         String $result = null;
         $result = this.telescopeName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 55:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_telescopeName
       {
         String newTelescopeName = in.read_string ();
         this.telescopeName (newTelescopeName);
         out = $rh.createReply();
         break;
       }

       case 56:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_originFITS
       {
         String $result = null;
         $result = this.originFITS ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 57:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_originFITS
       {
         String newOriginFITS = in.read_string ();
         this.originFITS (newOriginFITS);
         out = $rh.createReply();
         break;
       }

       case 58:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_observatoryName
       {
         String $result = null;
         $result = this.observatoryName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 59:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_observatoryName
       {
         String newObservatoryName = in.read_string ();
         this.observatoryName (newObservatoryName);
         out = $rh.createReply();
         break;
       }

       case 60:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_recenter
       {
         short $result = (short)0;
         $result = this.recenter ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 61:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_recenter
       {
         short newRecenter = in.read_short ();
         this.recenter (newRecenter);
         out = $rh.createReply();
         break;
       }

       case 62:  // EMIRDFAGENT/EMIRDFAgent_ifce/_get_max_recenter_radius
       {
         double $result = (double)0;
         $result = this.max_recenter_radius ();
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 63:  // EMIRDFAGENT/EMIRDFAgent_ifce/_set_max_recenter_radius
       {
         double newMax_recenter_radius = in.read_double ();
         this.max_recenter_radius (newMax_recenter_radius);
         out = $rh.createReply();
         break;
       }


  /*void receiveFrame(in DDPKF::Frame frame, in long currentWindow, in long numWindows,
                        in DGT::TinyVector topLeft, in DGT::TinyVector bottomRight, 
                        in DGT::TimeValue timestamp, in DGT::TimeValue exposureTime,
                        in string cameraId) 
  			raises (DGT::GCSException); */
       case 64:  // DFAGENT/DFAgent_ifce/setPrincipalInvestigatorName
       {
         try {
           String piName = in.read_string ();
           this.setPrincipalInvestigatorName (piName);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 65:  // DFAGENT/DFAgent_ifce/setObservationType
       {
         try {
           DFAGENT.ObservationType obsType = DFAGENT.ObservationTypeHelper.read (in);
           this.setObservationType (obsType);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 66:  // DFAGENT/DFAgent_ifce/setObservationClass
       {
         try {
           DFAGENT.ObservationClass obsClass = DFAGENT.ObservationClassHelper.read (in);
           this.setObservationClass (obsClass);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 67:  // DFAGENT/DFAgent_ifce/setInstrumentMode
       {
         try {
           String insMode = in.read_string ();
           this.setInstrumentMode (insMode);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 68:  // DFAGENT/DFAgent_ifce/setObserverName
       {
         try {
           String observerName = in.read_string ();
           this.setObserverName (observerName);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 69:  // DFAGENT/DFAgent_ifce/setObjectName
       {
         try {
           String objectName = in.read_string ();
           this.setObjectName (objectName);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 70:  // DFAGENT/DFAgent_ifce/getObjectName
       {
         try {
           String $result = null;
           $result = this.getObjectName ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 71:  // DFAGENT/DFAgent_ifce/setProgramId
       {
         try {
           String programId = in.read_string ();
           this.setProgramId (programId);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 72:  // DFAGENT/DFAgent_ifce/setESOProgramId
       {
         try {
           String esoProgramId = in.read_string ();
           this.setESOProgramId (esoProgramId);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 73:  // DFAGENT/DFAgent_ifce/setObservationBlockId
       {
         try {
           String obId = in.read_string ();
           this.setObservationBlockId (obId);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 74:  // DFAGENT/DFAgent_ifce/setImageTitle
       {
         try {
           String imageTitle = in.read_string ();
           this.setImageTitle (imageTitle);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 75:  // DFAGENT/DFAgent_ifce/setObservationComment
       {
         try {
           String observationComment = in.read_string ();
           this.setObservationComment (observationComment);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 76:  // DFAGENT/DFAgent_ifce/setObsModeLowLevel
       {
         try {
           short obsMode = in.read_short ();
           this.setObsModeLowLevel (obsMode);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 77:  // DFAGENT/DFAgent_ifce/setPropagateFrame
       {
         try {
           boolean doesPropagate = in.read_boolean ();
           this.setPropagateFrame (doesPropagate);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 78:  // DFAGENT/DFAgent_ifce/setSaveFrame
       {
         try {
           boolean doesSave = in.read_boolean ();
           this.setSaveFrame (doesSave);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 79:  // DFAGENT/DFAgent_ifce/setPropagateFITS
       {
         try {
           boolean doesPropagate = in.read_boolean ();
           this.setPropagateFITS (doesPropagate);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 80:  // DFAGENT/DFAgent_ifce/setSaveFITS
       {
         try {
           boolean doesSave = in.read_boolean ();
           this.setSaveFITS (doesSave);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 81:  // DFAGENT/DFAgent_ifce/createArchiveFits
       {
         try {
           this.createArchiveFits ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 82:  // DFAGENT/DFAgent_ifce/importFitsFile
       {
         try {
           this.importFitsFile ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 83:  // DFAGENT/DFAgent_ifce/commitArchiveFits
       {
         try {
           this.commitArchiveFits ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 84:  // DFAGENT/DFAgent_ifce/setAutoReduce
       {
         try {
           boolean doesAutoReduce = in.read_boolean ();
           this.setAutoReduce (doesAutoReduce);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 85:  // DFAGENT/DFAgent_ifce/setWriteKeywords
       {
         try {
           boolean doesWriteKeywords = in.read_boolean ();
           this.setWriteKeywords (doesWriteKeywords);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 86:  // DFAGENT/DFAgent_ifce/setReductionRecipe
       {
         try {
           this.setReductionRecipe ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 87:  // DFAGENT/DFAgent_ifce/commitOR
       {
         try {
           this.commitOR ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Monitorable attributes (device magnitudes)
       case 88:  // DFAGENT/DFAgent_ifce/_get_doesSaveFrame
       {
         boolean $result = false;
         $result = this.doesSaveFrame ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 89:  // DFAGENT/DFAgent_ifce/_get_doesPropagateFrame
       {
         boolean $result = false;
         $result = this.doesPropagateFrame ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 90:  // DFAGENT/DFAgent_ifce/_get_doesSaveFITS
       {
         boolean $result = false;
         $result = this.doesSaveFITS ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 91:  // DFAGENT/DFAgent_ifce/_get_doesPropagateFITS
       {
         boolean $result = false;
         $result = this.doesPropagateFITS ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 92:  // DFAGENT/DFAgent_ifce/_get_doesAutoReduce
       {
         boolean $result = false;
         $result = this.doesAutoReduce ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 93:  // DFAGENT/DFAgent_ifce/_get_doesWriteKeywords
       {
         boolean $result = false;
         $result = this.doesWriteKeywords ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // Configurable attributes (device properties)
       case 94:  // DFAGENT/DFAgent_ifce/_get_offlineImagesPath
       {
         String $result = null;
         $result = this.offlineImagesPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Configurable attributes (device properties)
       case 95:  // DFAGENT/DFAgent_ifce/_set_offlineImagesPath
       {
         String newOfflineImagesPath = in.read_string ();
         this.offlineImagesPath (newOfflineImagesPath);
         out = $rh.createReply();
         break;
       }

       case 96:  // DFAGENT/DFAgent_ifce/_get_dfBranchInstanceName
       {
         String $result = null;
         $result = this.dfBranchInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 97:  // DFAGENT/DFAgent_ifce/_set_dfBranchInstanceName
       {
         String newDfBranchInstanceName = in.read_string ();
         this.dfBranchInstanceName (newDfBranchInstanceName);
         out = $rh.createReply();
         break;
       }

       case 98:  // DFAGENT/DFAgent_ifce/_get_dfAgentPartnerInstanceName
       {
         String $result = null;
         $result = this.dfAgentPartnerInstanceName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 99:  // DFAGENT/DFAgent_ifce/_set_dfAgentPartnerInstanceName
       {
         String newDfAgentPartnerInstanceName = in.read_string ();
         this.dfAgentPartnerInstanceName (newDfAgentPartnerInstanceName);
         out = $rh.createReply();
         break;
       }

       case 100:  // DFAGENT/DFAgent_ifce/_get_propagateFrame
       {
         short $result = (short)0;
         $result = this.propagateFrame ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 101:  // DFAGENT/DFAgent_ifce/_set_propagateFrame
       {
         short newPropagateFrame = in.read_short ();
         this.propagateFrame (newPropagateFrame);
         out = $rh.createReply();
         break;
       }

       case 102:  // DFAGENT/DFAgent_ifce/_get_saveFrame
       {
         short $result = (short)0;
         $result = this.saveFrame ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 103:  // DFAGENT/DFAgent_ifce/_set_saveFrame
       {
         short newSaveFrame = in.read_short ();
         this.saveFrame (newSaveFrame);
         out = $rh.createReply();
         break;
       }

       case 104:  // DFAGENT/DFAgent_ifce/_get_propagateFITS
       {
         short $result = (short)0;
         $result = this.propagateFITS ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 105:  // DFAGENT/DFAgent_ifce/_set_propagateFITS
       {
         short newPropagateFITS = in.read_short ();
         this.propagateFITS (newPropagateFITS);
         out = $rh.createReply();
         break;
       }

       case 106:  // DFAGENT/DFAgent_ifce/_get_saveFITS
       {
         short $result = (short)0;
         $result = this.saveFITS ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 107:  // DFAGENT/DFAgent_ifce/_set_saveFITS
       {
         short newSaveFITS = in.read_short ();
         this.saveFITS (newSaveFITS);
         out = $rh.createReply();
         break;
       }

       case 108:  // DFAGENT/DFAgent_ifce/_get_autoReduce
       {
         short $result = (short)0;
         $result = this.autoReduce ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 109:  // DFAGENT/DFAgent_ifce/_set_autoReduce
       {
         short newAutoReduce = in.read_short ();
         this.autoReduce (newAutoReduce);
         out = $rh.createReply();
         break;
       }

       case 110:  // DFAGENT/DFAgent_ifce/_get_writeKeywords
       {
         short $result = (short)0;
         $result = this.writeKeywords ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 111:  // DFAGENT/DFAgent_ifce/_set_writeKeywords
       {
         short newWriteKeywords = in.read_short ();
         this.writeKeywords (newWriteKeywords);
         out = $rh.createReply();
         break;
       }

       case 112:  // DFAGENT/DFAgent_ifce/_get_flippedImage
       {
         short $result = (short)0;
         $result = this.flippedImage ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 113:  // DFAGENT/DFAgent_ifce/_set_flippedImage
       {
         short newFlippedImage = in.read_short ();
         this.flippedImage (newFlippedImage);
         out = $rh.createReply();
         break;
       }

       case 114:  // DFAGENT/DFAgent_ifce/_get_testingMode
       {
         short $result = (short)0;
         $result = this.testingMode ();
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       case 115:  // DFAGENT/DFAgent_ifce/_set_testingMode
       {
         short newTestingMode = in.read_short ();
         this.testingMode (newTestingMode);
         out = $rh.createReply();
         break;
       }

       case 116:  // DFAGENT/DFAgent_ifce/_get_obsModeKeywordListPath
       {
         String $result = null;
         $result = this.obsModeKeywordListPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 117:  // DFAGENT/DFAgent_ifce/_set_obsModeKeywordListPath
       {
         String newObsModeKeywordListPath = in.read_string ();
         this.obsModeKeywordListPath (newObsModeKeywordListPath);
         out = $rh.createReply();
         break;
       }

       case 118:  // DFAGENT/DFAgent_ifce/_get_recipeDictionaryPath
       {
         String $result = null;
         $result = this.recipeDictionaryPath ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 119:  // DFAGENT/DFAgent_ifce/_set_recipeDictionaryPath
       {
         String newRecipeDictionaryPath = in.read_string ();
         this.recipeDictionaryPath (newRecipeDictionaryPath);
         out = $rh.createReply();
         break;
       }

       case 120:  // DFAGENT/DFAgent_ifce/_get_gcsComponent
       {
         String $result = null;
         $result = this.gcsComponent ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 121:  // DFAGENT/DFAgent_ifce/_set_gcsComponent
       {
         String newGcsComponent = in.read_string ();
         this.gcsComponent (newGcsComponent);
         out = $rh.createReply();
         break;
       }

       case 122:  // DFAGENT/DFAgent_ifce/_get_cameraName
       {
         String $result = null;
         $result = this.cameraName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 123:  // DFAGENT/DFAgent_ifce/_set_cameraName
       {
         String newCameraName = in.read_string ();
         this.cameraName (newCameraName);
         out = $rh.createReply();
         break;
       }

       case 124:  // DFAGENT/DFAgent_ifce/_get_referencePixel
       {
         DGT.DoubleArray $result = null;
         $result = this.referencePixel ();
         out = $rh.createReply();
         DGT.DoubleArrayHelper.write (out, $result);
         break;
       }

       case 125:  // DFAGENT/DFAgent_ifce/_set_referencePixel
       {
         DGT.DoubleArray newReferencePixel = DGT.DoubleArrayHelper.read (in);
         this.referencePixel (newReferencePixel);
         out = $rh.createReply();
         break;
       }


  /**
      * Enables the device
      */
       case 126:  // DCF/Device_ifce/enable
       {
         try {
           this.enable ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Goes to DISABLE state. Only possible from OFF,ON,IDLE,FAULT
      */
       case 127:  // DCF/Device_ifce/disable
       {
         try {
           this.disable ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Starting procedure
      */
       case 128:  // DCF/Device_ifce/start
       {
         try {
           this.start ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Initialization procedure
      */
       case 129:  // DCF/Device_ifce/init
       {
         try {
           this.init ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Halting procedure
      */
       case 130:  // DCF/Device_ifce/halt
       {
         try {
           this.halt ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Shutdown procedure
      */
       case 131:  // DCF/Device_ifce/shutdown
       {
         try {
           this.shutdown ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Restore previous situation before FAULT
      */
       case 132:  // DCF/Device_ifce/restore
       {
         try {
           this.restore ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Stop all activity and goes to FAULT
      */
       case 133:  // DCF/Device_ifce/abort
       {
         try {
           this.abort ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Resets the current settings, connections, etc of the Device.
      */
       case 134:  // DCF/Device_ifce/reset
       {
         try {
           this.reset ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Performs some kind of test and returns a report about the results.
      */
       case 135:  // DCF/Device_ifce/test
       {
         try {
           this.test ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Sets a configuration by name
      */
       case 136:  // DCF/Device_ifce/configure
       {
         try {
           String config_name = in.read_string ();
           this.configure (config_name);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Checks that communication with a Device object is possible via CORBA.
      * In TAO at least, if this method is oneway it only checks for the sanity
      * of the remote ORB, but it does not garantee anything about the concrete 
      * remote object. For this reason the oneway has been removed.
      */
       case 137:  // DCF/Device_ifce/ping
       {
         try {
           this.ping ();
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Returns a text reporting the.
      * @param level (SHORT, FULL, NORMAL) 
      */
       case 138:  // DCF/Device_ifce/report
       {
         try {
           short level = in.read_short ();
           String $result = null;
           $result = this.report (level);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * Returns a text reporting internal implementation details of Device. 
      */
       case 139:  // DCF/Device_ifce/internals
       {
         try {
           String $result = null;
           $result = this.internals ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
      * To be able to ask for a certain state
      */
       case 140:  // DCF/Device_ifce/isOff
       {
         boolean $result = false;
         $result = this.isOff ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 141:  // DCF/Device_ifce/isStarting
       {
         boolean $result = false;
         $result = this.isStarting ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 142:  // DCF/Device_ifce/isShuttingDown
       {
         boolean $result = false;
         $result = this.isShuttingDown ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 143:  // DCF/Device_ifce/isOn
       {
         boolean $result = false;
         $result = this.isOn ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 144:  // DCF/Device_ifce/isInitialising
       {
         boolean $result = false;
         $result = this.isInitialising ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 145:  // DCF/Device_ifce/isHalting
       {
         boolean $result = false;
         $result = this.isHalting ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 146:  // DCF/Device_ifce/isIdle
       {
         boolean $result = false;
         $result = this.isIdle ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 147:  // DCF/Device_ifce/isRunning
       {
         boolean $result = false;
         $result = this.isRunning ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 148:  // DCF/Device_ifce/isDisabled
       {
         boolean $result = false;
         $result = this.isDisabled ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 149:  // DCF/Device_ifce/isFault
       {
         boolean $result = false;
         $result = this.isFault ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 150:  // DCF/Device_ifce/isResetting
       {
         boolean $result = false;
         $result = this.isResetting ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
      * A Device is Ready in IDLE or RUN states. NOT in DISABLED.
      */
       case 151:  // DCF/Device_ifce/isReady
       {
         boolean $result = false;
         $result = this.isReady ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
      * A Device is configurable in STARTING, ON, IDLE, FAULT
      */
       case 152:  // DCF/Device_ifce/isConfigurable
       {
         boolean $result = false;
         $result = this.isConfigurable ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
      * A Device is composite if has aggregated Devices
      */
       case 153:  // DCF/Device_ifce/isComposite
       {
         boolean $result = false;
         $result = this.isComposite ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
      * A Device is INtegrated if is connected to the rest of GCS
      */
       case 154:  // DCF/Device_ifce/isIntegrated
       {
         boolean $result = false;
         $result = this.isIntegrated ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
      * The Device's instance name.
      */
       case 155:  // DCF/Device_ifce/_get_name
       {
         String $result = null;
         $result = this.name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
      * The Device's class name.
      */
       case 156:  // DCF/Device_ifce/_get_className
       {
         String $result = null;
         $result = this.className ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
      * The Device's version.
      */
       case 157:  // DCF/Device_ifce/_get_version
       {
         String $result = null;
         $result = this.version ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
      * The Device's current state: OFF, ON, STARTING, IDLE, etc.
      */
       case 158:  // DCF/Device_ifce/_get_state
       {
         DGT.State_t $result = null;
         $result = this.state ();
         out = $rh.createReply();
         DGT.State_tHelper.write (out, $result);
         break;
       }


  /**
      * The time when the Device started running.
      */
       case 159:  // DCF/Device_ifce/_get_startTime
       {
         DGT.TimeValue $result = null;
         $result = this.startTime ();
         out = $rh.createReply();
         DGT.TimeValueHelper.write (out, $result);
         break;
       }


  /**
      * The list of monitorable magnitudes names supported by this Device.
      */
       case 160:  // DCF/Device_ifce/_get_magnitudes
       {
         String $result[] = null;
         $result = this.magnitudes ();
         out = $rh.createReply();
         DGT.StringListHelper.write (out, $result);
         break;
       }


  /**
      * The list of property names supported by this Device.
      */
       case 161:  // DCF/Device_ifce/_get_properties
       {
         String $result[] = null;
         $result = this.properties ();
         out = $rh.createReply();
         DGT.StringListHelper.write (out, $result);
         break;
       }


  /**
      * The list of alarm names supported by this Device.
      */
       case 162:  // DCF/Device_ifce/_get_alarms
       {
         String $result[] = null;
         $result = this.alarms ();
         out = $rh.createReply();
         DGT.StringListHelper.write (out, $result);
         break;
       }


  /**
      * Get/set as a whole the current Configuration of the Device.
      */
       case 163:  // DCF/Device_ifce/_get_configuration
       {
         CONFIG.Configuration $result = null;
         $result = this.configuration ();
         out = $rh.createReply();
         CONFIG.ConfigurationHelper.write (out, $result);
         break;
       }


  /**
      * Get/set as a whole the current Configuration of the Device.
      */
       case 164:  // DCF/Device_ifce/_set_configuration
       {
         CONFIG.Configuration newConfiguration = CONFIG.ConfigurationHelper.read (in);
         this.configuration (newConfiguration);
         out = $rh.createReply();
         break;
       }


  /* deprecated */
       case 165:  // DCF/Device_ifce/startDebug
       {
         this.startDebug ();
         out = $rh.createReply();
         break;
       }

       case 166:  // DCF/Device_ifce/stopDebug
       {
         this.stopDebug ();
         out = $rh.createReply();
         break;
       }

       case 167:  // MM/Monitor_ifce/changeMonitorConfiguration
       {
         try {
           String magnitude = in.read_string ();
           MM.Config config = MM.ConfigHelper.read (in);
           this.changeMonitorConfiguration (magnitude, config);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 168:  // MM/Monitor_ifce/forceSampleData
       {
         try {
           String magnitude = in.read_string ();
           this.forceSampleData (magnitude);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 169:  // DF/RawFrameReceiver_ifce/receiveFrame
       {
         try {
           DDPKF.Frame frame = DDPKF.FrameHelper.read (in);
           int currentWindow = in.read_long ();
           int numWindows = in.read_long ();
           DGT.TinyVector topLeft = DGT.TinyVectorHelper.read (in);
           DGT.TinyVector bottomRight = DGT.TinyVectorHelper.read (in);
           DGT.TimeValue timestamp = DGT.TimeValueHelper.read (in);
           DGT.TimeValue exposureTime = DGT.TimeValueHelper.read (in);
           String cameraId = in.read_string ();
           this.receiveFrame (frame, currentWindow, numWindows, topLeft, bottomRight, timestamp, exposureTime, cameraId);
           out = $rh.createReply();
         } catch (DGT.GCSException $ex) {
           out = $rh.createExceptionReply ();
           DGT.GCSExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gtc/EMIRDFAGENT/EMIRDFAgent_ifce:1.0", 
    "IDL:gtc/DFAGENT/DFAgent_ifce:1.0", 
    "IDL:gtc/DCF/Device_ifce:1.0", 
    "IDL:gtc/MM/Monitor_ifce:1.0", 
    "IDL:gtc/DF/RawFrameReceiver_ifce:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EMIRDFAgent_ifce _this() 
  {
    return EMIRDFAgent_ifceHelper.narrow(
    super._this_object());
  }

  public EMIRDFAgent_ifce _this(org.omg.CORBA.ORB orb) 
  {
    return EMIRDFAgent_ifceHelper.narrow(
    super._this_object(orb));
  }


} // class EMIRDFAgent_ifcePOA
