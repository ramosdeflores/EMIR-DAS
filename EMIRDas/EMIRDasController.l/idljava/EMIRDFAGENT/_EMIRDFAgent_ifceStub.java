package EMIRDFAGENT;


/**
* EMIRDFAGENT/_EMIRDFAgent_ifceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from EMIRDFAGENT.idl
* lunes 18 de mayo de 2015 13H52' WEST
*/

public class _EMIRDFAgent_ifceStub extends org.omg.CORBA.portable.ObjectImpl implements EMIRDFAGENT.EMIRDFAgent_ifce
{


  // Specific EMIRDFAgent operations
  public void setObsMode (EMIRDFAGENT.ObservationMode obsMode) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObsMode", true);
                EMIRDFAGENT.ObservationModeHelper.write ($out, obsMode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObsMode (obsMode        );
            } finally {
                _releaseReply ($in);
            }
  } // setObsMode

  public void setNumberOfImagesToCollect (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumberOfImagesToCollect", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumberOfImagesToCollect (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumberOfImagesToCollect

  public void setNumberOfReadsInAPoint (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumberOfReadsInAPoint", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumberOfReadsInAPoint (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumberOfReadsInAPoint


  //			raises (DGT::GCSException);
  public void setFilterName (String filter, short position) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFilterName", true);
                $out.write_string (filter);
                $out.write_short (position);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFilterName (filter, position        );
            } finally {
                _releaseReply ($in);
            }
  } // setFilterName

  public void setGrismName (String grism) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setGrismName", true);
                $out.write_string (grism);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setGrismName (grism        );
            } finally {
                _releaseReply ($in);
            }
  } // setGrismName

  public void setCSUConfFile (String file) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCSUConfFile", true);
                $out.write_string (file);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCSUConfFile (file        );
            } finally {
                _releaseReply ($in);
            }
  } // setCSUConfFile

  public void endSequence (boolean value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("endSequence", true);
                $out.write_boolean (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                endSequence (value        );
            } finally {
                _releaseReply ($in);
            }
  } // endSequence

  public void setFlip (boolean value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFlip", true);
                $out.write_boolean (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFlip (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setFlip

  public void setRotatorOffset (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setRotatorOffset", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setRotatorOffset (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setRotatorOffset

  public void setReferencePixel (double pixelX, double pixelY) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setReferencePixel", true);
                $out.write_double (pixelX);
                $out.write_double (pixelY);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setReferencePixel (pixelX, pixelY        );
            } finally {
                _releaseReply ($in);
            }
  } // setReferencePixel

  public void setPlateScale (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPlateScale", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPlateScale (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setPlateScale

  public void setInstrumentPositionAngle (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setInstrumentPositionAngle", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setInstrumentPositionAngle (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setInstrumentPositionAngle

  public void setDetectorPositionAngle (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDetectorPositionAngle", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDetectorPositionAngle (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setDetectorPositionAngle

  public void setDTUPositionAngle (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDTUPositionAngle", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDTUPositionAngle (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setDTUPositionAngle

  public void setFocalPlanePositionAngle (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setFocalPlanePositionAngle", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setFocalPlanePositionAngle (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setFocalPlanePositionAngle

  public void setPixelSizeAtDetector (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPixelSizeAtDetector", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPixelSizeAtDetector (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setPixelSizeAtDetector

  public void setPixelSizeAtFocalPlane (double value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPixelSizeAtFocalPlane", true);
                $out.write_double (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPixelSizeAtFocalPlane (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setPixelSizeAtFocalPlane

  public void setDTU_FOV (int valueX, int valueY, int valueZ) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDTU_FOV", true);
                $out.write_long (valueX);
                $out.write_long (valueY);
                $out.write_long (valueZ);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDTU_FOV (valueX, valueY, valueZ        );
            } finally {
                _releaseReply ($in);
            }
  } // setDTU_FOV

  public void setDTU_Factor (int valueX, int valueY, int valueZ) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDTU_Factor", true);
                $out.write_long (valueX);
                $out.write_long (valueY);
                $out.write_long (valueZ);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDTU_Factor (valueX, valueY, valueZ        );
            } finally {
                _releaseReply ($in);
            }
  } // setDTU_Factor

  public void setDTU_Commanded (int valueX, int valueY, int valueZ) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDTU_Commanded", true);
                $out.write_long (valueX);
                $out.write_long (valueY);
                $out.write_long (valueZ);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDTU_Commanded (valueX, valueY, valueZ        );
            } finally {
                _releaseReply ($in);
            }
  } // setDTU_Commanded

  public void setCoordinateType (String value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCoordinateType", true);
                $out.write_string (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCoordinateType (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setCoordinateType

  public void setCRVAL (double alfa, double delta) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCRVAL", true);
                $out.write_double (alfa);
                $out.write_double (delta);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCRVAL (alfa, delta        );
            } finally {
                _releaseReply ($in);
            }
  } // setCRVAL

  public void setDetectorCenter (int valueX, int valueY) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setDetectorCenter", true);
                $out.write_long (valueX);
                $out.write_long (valueY);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setDetectorCenter (valueX, valueY        );
            } finally {
                _releaseReply ($in);
            }
  } // setDetectorCenter

  public void setNumberCycle (String value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumberCycle", true);
                $out.write_string (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumberCycle (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumberCycle

  public void setCryiostateVersion (String value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCryiostateVersion", true);
                $out.write_string (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCryiostateVersion (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setCryiostateVersion

  public void setNumObservingBlock (int numTotalObservingBlocks, int numActualObservingBlock, int numTotalImagesInObsBlock, int numActualImageInObsBlock) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumObservingBlock", true);
                $out.write_long (numTotalObservingBlocks);
                $out.write_long (numActualObservingBlock);
                $out.write_long (numTotalImagesInObsBlock);
                $out.write_long (numActualImageInObsBlock);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumObservingBlock (numTotalObservingBlocks, numActualObservingBlock, numTotalImagesInObsBlock, numActualImageInObsBlock        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumObservingBlock

  public void setNumTotalObservingBlocks (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumTotalObservingBlocks", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumTotalObservingBlocks (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumTotalObservingBlocks

  public void setNumActualObservingBlock (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumActualObservingBlock", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumActualObservingBlock (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumActualObservingBlock

  public void setNumTotalImagesInObsBlock (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumTotalImagesInObsBlock", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumTotalImagesInObsBlock (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumTotalImagesInObsBlock

  public void setNumActualImageInObsBlock (int value) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setNumActualImageInObsBlock", true);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setNumActualImageInObsBlock (value        );
            } finally {
                _releaseReply ($in);
            }
  } // setNumActualImageInObsBlock


  // Monitorable attributes (device magnitudes)
  public EMIRDFAGENT.ObservationMode obsMode ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_obsMode", true);
                $in = _invoke ($out);
                EMIRDFAGENT.ObservationMode $result = EMIRDFAGENT.ObservationModeHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return obsMode (        );
            } finally {
                _releaseReply ($in);
            }
  } // obsMode

  public boolean isReceivingImageFinished ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_isReceivingImageFinished", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isReceivingImageFinished (        );
            } finally {
                _releaseReply ($in);
            }
  } // isReceivingImageFinished


  // Configurable attributes (device properties)
  public String observingEngineInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_observingEngineInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return observingEngineInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // observingEngineInstanceName


  // Configurable attributes (device properties)
  public void observingEngineInstanceName (String newObservingEngineInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_observingEngineInstanceName", true);
                $out.write_string (newObservingEngineInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                observingEngineInstanceName (newObservingEngineInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // observingEngineInstanceName

  public String dfManagerInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_dfManagerInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return dfManagerInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // dfManagerInstanceName

  public void dfManagerInstanceName (String newDfManagerInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_dfManagerInstanceName", true);
                $out.write_string (newDfManagerInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                dfManagerInstanceName (newDfManagerInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // dfManagerInstanceName

  public String dtuInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_dtuInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return dtuInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // dtuInstanceName

  public void dtuInstanceName (String newDtuInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_dtuInstanceName", true);
                $out.write_string (newDtuInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                dtuInstanceName (newDtuInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // dtuInstanceName

  public String emirInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_emirInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return emirInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // emirInstanceName

  public void emirInstanceName (String newEmirInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_emirInstanceName", true);
                $out.write_string (newEmirInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                emirInstanceName (newEmirInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // emirInstanceName

  public String flatsPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_flatsPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return flatsPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // flatsPath

  public void flatsPath (String newFlatsPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_flatsPath", true);
                $out.write_string (newFlatsPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                flatsPath (newFlatsPath        );
            } finally {
                _releaseReply ($in);
            }
  } // flatsPath

  public String biasPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_biasPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return biasPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // biasPath

  public void biasPath (String newBiasPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_biasPath", true);
                $out.write_string (newBiasPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                biasPath (newBiasPath        );
            } finally {
                _releaseReply ($in);
            }
  } // biasPath

  public String darksPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_darksPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return darksPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // darksPath

  public void darksPath (String newDarksPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_darksPath", true);
                $out.write_string (newDarksPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                darksPath (newDarksPath        );
            } finally {
                _releaseReply ($in);
            }
  } // darksPath

  public String skyPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_skyPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return skyPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // skyPath

  public void skyPath (String newSkyPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_skyPath", true);
                $out.write_string (newSkyPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                skyPath (newSkyPath        );
            } finally {
                _releaseReply ($in);
            }
  } // skyPath

  public String pinholesPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_pinholesPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return pinholesPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // pinholesPath

  public void pinholesPath (String newPinholesPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_pinholesPath", true);
                $out.write_string (newPinholesPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                pinholesPath (newPinholesPath        );
            } finally {
                _releaseReply ($in);
            }
  } // pinholesPath

  public String latitude ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_latitude", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return latitude (        );
            } finally {
                _releaseReply ($in);
            }
  } // latitude

  public void latitude (String newLatitude)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_latitude", true);
                $out.write_string (newLatitude);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                latitude (newLatitude        );
            } finally {
                _releaseReply ($in);
            }
  } // latitude

  public String longitude ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_longitude", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return longitude (        );
            } finally {
                _releaseReply ($in);
            }
  } // longitude

  public void longitude (String newLongitude)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_longitude", true);
                $out.write_string (newLongitude);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                longitude (newLongitude        );
            } finally {
                _releaseReply ($in);
            }
  } // longitude

  public String telescopeName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_telescopeName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return telescopeName (        );
            } finally {
                _releaseReply ($in);
            }
  } // telescopeName

  public void telescopeName (String newTelescopeName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_telescopeName", true);
                $out.write_string (newTelescopeName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                telescopeName (newTelescopeName        );
            } finally {
                _releaseReply ($in);
            }
  } // telescopeName

  public String originFITS ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_originFITS", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return originFITS (        );
            } finally {
                _releaseReply ($in);
            }
  } // originFITS

  public void originFITS (String newOriginFITS)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_originFITS", true);
                $out.write_string (newOriginFITS);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                originFITS (newOriginFITS        );
            } finally {
                _releaseReply ($in);
            }
  } // originFITS

  public String observatoryName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_observatoryName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return observatoryName (        );
            } finally {
                _releaseReply ($in);
            }
  } // observatoryName

  public void observatoryName (String newObservatoryName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_observatoryName", true);
                $out.write_string (newObservatoryName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                observatoryName (newObservatoryName        );
            } finally {
                _releaseReply ($in);
            }
  } // observatoryName

  public short recenter ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_recenter", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return recenter (        );
            } finally {
                _releaseReply ($in);
            }
  } // recenter

  public void recenter (short newRecenter)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_recenter", true);
                $out.write_short (newRecenter);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                recenter (newRecenter        );
            } finally {
                _releaseReply ($in);
            }
  } // recenter

  public double max_recenter_radius ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_max_recenter_radius", true);
                $in = _invoke ($out);
                double $result = $in.read_double ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return max_recenter_radius (        );
            } finally {
                _releaseReply ($in);
            }
  } // max_recenter_radius

  public void max_recenter_radius (double newMax_recenter_radius)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_max_recenter_radius", true);
                $out.write_double (newMax_recenter_radius);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                max_recenter_radius (newMax_recenter_radius        );
            } finally {
                _releaseReply ($in);
            }
  } // max_recenter_radius


  /*void receiveFrame(in DDPKF::Frame frame, in long currentWindow, in long numWindows,
                        in DGT::TinyVector topLeft, in DGT::TinyVector bottomRight, 
                        in DGT::TimeValue timestamp, in DGT::TimeValue exposureTime,
                        in string cameraId) 
  			raises (DGT::GCSException); */
  public void setPrincipalInvestigatorName (String piName) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPrincipalInvestigatorName", true);
                $out.write_string (piName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPrincipalInvestigatorName (piName        );
            } finally {
                _releaseReply ($in);
            }
  } // setPrincipalInvestigatorName

  public void setObservationType (DFAGENT.ObservationType obsType) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObservationType", true);
                DFAGENT.ObservationTypeHelper.write ($out, obsType);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObservationType (obsType        );
            } finally {
                _releaseReply ($in);
            }
  } // setObservationType

  public void setObservationClass (DFAGENT.ObservationClass obsClass) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObservationClass", true);
                DFAGENT.ObservationClassHelper.write ($out, obsClass);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObservationClass (obsClass        );
            } finally {
                _releaseReply ($in);
            }
  } // setObservationClass

  public void setInstrumentMode (String insMode) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setInstrumentMode", true);
                $out.write_string (insMode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setInstrumentMode (insMode        );
            } finally {
                _releaseReply ($in);
            }
  } // setInstrumentMode

  public void setObserverName (String observerName) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObserverName", true);
                $out.write_string (observerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObserverName (observerName        );
            } finally {
                _releaseReply ($in);
            }
  } // setObserverName

  public void setObjectName (String objectName) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObjectName", true);
                $out.write_string (objectName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObjectName (objectName        );
            } finally {
                _releaseReply ($in);
            }
  } // setObjectName

  public String getObjectName () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getObjectName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getObjectName (        );
            } finally {
                _releaseReply ($in);
            }
  } // getObjectName

  public void setProgramId (String programId) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setProgramId", true);
                $out.write_string (programId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setProgramId (programId        );
            } finally {
                _releaseReply ($in);
            }
  } // setProgramId

  public void setESOProgramId (String esoProgramId) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setESOProgramId", true);
                $out.write_string (esoProgramId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setESOProgramId (esoProgramId        );
            } finally {
                _releaseReply ($in);
            }
  } // setESOProgramId

  public void setObservationBlockId (String obId) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObservationBlockId", true);
                $out.write_string (obId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObservationBlockId (obId        );
            } finally {
                _releaseReply ($in);
            }
  } // setObservationBlockId

  public void setImageTitle (String imageTitle) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setImageTitle", true);
                $out.write_string (imageTitle);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setImageTitle (imageTitle        );
            } finally {
                _releaseReply ($in);
            }
  } // setImageTitle

  public void setObservationComment (String observationComment) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObservationComment", true);
                $out.write_string (observationComment);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObservationComment (observationComment        );
            } finally {
                _releaseReply ($in);
            }
  } // setObservationComment

  public void setObsModeLowLevel (short obsMode) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setObsModeLowLevel", true);
                $out.write_short (obsMode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setObsModeLowLevel (obsMode        );
            } finally {
                _releaseReply ($in);
            }
  } // setObsModeLowLevel

  public void setPropagateFrame (boolean doesPropagate) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPropagateFrame", true);
                $out.write_boolean (doesPropagate);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPropagateFrame (doesPropagate        );
            } finally {
                _releaseReply ($in);
            }
  } // setPropagateFrame

  public void setSaveFrame (boolean doesSave) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSaveFrame", true);
                $out.write_boolean (doesSave);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSaveFrame (doesSave        );
            } finally {
                _releaseReply ($in);
            }
  } // setSaveFrame

  public void setPropagateFITS (boolean doesPropagate) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setPropagateFITS", true);
                $out.write_boolean (doesPropagate);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setPropagateFITS (doesPropagate        );
            } finally {
                _releaseReply ($in);
            }
  } // setPropagateFITS

  public void setSaveFITS (boolean doesSave) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setSaveFITS", true);
                $out.write_boolean (doesSave);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setSaveFITS (doesSave        );
            } finally {
                _releaseReply ($in);
            }
  } // setSaveFITS

  public void createArchiveFits () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createArchiveFits", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createArchiveFits (        );
            } finally {
                _releaseReply ($in);
            }
  } // createArchiveFits

  public void importFitsFile () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("importFitsFile", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                importFitsFile (        );
            } finally {
                _releaseReply ($in);
            }
  } // importFitsFile

  public void commitArchiveFits () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("commitArchiveFits", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                commitArchiveFits (        );
            } finally {
                _releaseReply ($in);
            }
  } // commitArchiveFits

  public void setAutoReduce (boolean doesAutoReduce) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setAutoReduce", true);
                $out.write_boolean (doesAutoReduce);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setAutoReduce (doesAutoReduce        );
            } finally {
                _releaseReply ($in);
            }
  } // setAutoReduce

  public void setWriteKeywords (boolean doesWriteKeywords) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setWriteKeywords", true);
                $out.write_boolean (doesWriteKeywords);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setWriteKeywords (doesWriteKeywords        );
            } finally {
                _releaseReply ($in);
            }
  } // setWriteKeywords

  public void setReductionRecipe () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setReductionRecipe", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setReductionRecipe (        );
            } finally {
                _releaseReply ($in);
            }
  } // setReductionRecipe

  public void commitOR () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("commitOR", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                commitOR (        );
            } finally {
                _releaseReply ($in);
            }
  } // commitOR


  // Monitorable attributes (device magnitudes)
  public boolean doesSaveFrame ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesSaveFrame", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesSaveFrame (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesSaveFrame

  public boolean doesPropagateFrame ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesPropagateFrame", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesPropagateFrame (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesPropagateFrame

  public boolean doesSaveFITS ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesSaveFITS", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesSaveFITS (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesSaveFITS

  public boolean doesPropagateFITS ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesPropagateFITS", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesPropagateFITS (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesPropagateFITS

  public boolean doesAutoReduce ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesAutoReduce", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesAutoReduce (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesAutoReduce

  public boolean doesWriteKeywords ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_doesWriteKeywords", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return doesWriteKeywords (        );
            } finally {
                _releaseReply ($in);
            }
  } // doesWriteKeywords


  // Configurable attributes (device properties)
  public String offlineImagesPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_offlineImagesPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return offlineImagesPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // offlineImagesPath


  // Configurable attributes (device properties)
  public void offlineImagesPath (String newOfflineImagesPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_offlineImagesPath", true);
                $out.write_string (newOfflineImagesPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                offlineImagesPath (newOfflineImagesPath        );
            } finally {
                _releaseReply ($in);
            }
  } // offlineImagesPath

  public String dfBranchInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_dfBranchInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return dfBranchInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // dfBranchInstanceName

  public void dfBranchInstanceName (String newDfBranchInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_dfBranchInstanceName", true);
                $out.write_string (newDfBranchInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                dfBranchInstanceName (newDfBranchInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // dfBranchInstanceName

  public String dfAgentPartnerInstanceName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_dfAgentPartnerInstanceName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return dfAgentPartnerInstanceName (        );
            } finally {
                _releaseReply ($in);
            }
  } // dfAgentPartnerInstanceName

  public void dfAgentPartnerInstanceName (String newDfAgentPartnerInstanceName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_dfAgentPartnerInstanceName", true);
                $out.write_string (newDfAgentPartnerInstanceName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                dfAgentPartnerInstanceName (newDfAgentPartnerInstanceName        );
            } finally {
                _releaseReply ($in);
            }
  } // dfAgentPartnerInstanceName

  public short propagateFrame ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_propagateFrame", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return propagateFrame (        );
            } finally {
                _releaseReply ($in);
            }
  } // propagateFrame

  public void propagateFrame (short newPropagateFrame)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_propagateFrame", true);
                $out.write_short (newPropagateFrame);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                propagateFrame (newPropagateFrame        );
            } finally {
                _releaseReply ($in);
            }
  } // propagateFrame

  public short saveFrame ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_saveFrame", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return saveFrame (        );
            } finally {
                _releaseReply ($in);
            }
  } // saveFrame

  public void saveFrame (short newSaveFrame)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_saveFrame", true);
                $out.write_short (newSaveFrame);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                saveFrame (newSaveFrame        );
            } finally {
                _releaseReply ($in);
            }
  } // saveFrame

  public short propagateFITS ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_propagateFITS", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return propagateFITS (        );
            } finally {
                _releaseReply ($in);
            }
  } // propagateFITS

  public void propagateFITS (short newPropagateFITS)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_propagateFITS", true);
                $out.write_short (newPropagateFITS);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                propagateFITS (newPropagateFITS        );
            } finally {
                _releaseReply ($in);
            }
  } // propagateFITS

  public short saveFITS ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_saveFITS", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return saveFITS (        );
            } finally {
                _releaseReply ($in);
            }
  } // saveFITS

  public void saveFITS (short newSaveFITS)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_saveFITS", true);
                $out.write_short (newSaveFITS);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                saveFITS (newSaveFITS        );
            } finally {
                _releaseReply ($in);
            }
  } // saveFITS

  public short autoReduce ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_autoReduce", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return autoReduce (        );
            } finally {
                _releaseReply ($in);
            }
  } // autoReduce

  public void autoReduce (short newAutoReduce)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_autoReduce", true);
                $out.write_short (newAutoReduce);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                autoReduce (newAutoReduce        );
            } finally {
                _releaseReply ($in);
            }
  } // autoReduce

  public short writeKeywords ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_writeKeywords", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return writeKeywords (        );
            } finally {
                _releaseReply ($in);
            }
  } // writeKeywords

  public void writeKeywords (short newWriteKeywords)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_writeKeywords", true);
                $out.write_short (newWriteKeywords);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                writeKeywords (newWriteKeywords        );
            } finally {
                _releaseReply ($in);
            }
  } // writeKeywords

  public short flippedImage ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_flippedImage", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return flippedImage (        );
            } finally {
                _releaseReply ($in);
            }
  } // flippedImage

  public void flippedImage (short newFlippedImage)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_flippedImage", true);
                $out.write_short (newFlippedImage);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                flippedImage (newFlippedImage        );
            } finally {
                _releaseReply ($in);
            }
  } // flippedImage

  public short testingMode ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_testingMode", true);
                $in = _invoke ($out);
                short $result = $in.read_short ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return testingMode (        );
            } finally {
                _releaseReply ($in);
            }
  } // testingMode

  public void testingMode (short newTestingMode)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_testingMode", true);
                $out.write_short (newTestingMode);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                testingMode (newTestingMode        );
            } finally {
                _releaseReply ($in);
            }
  } // testingMode

  public String obsModeKeywordListPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_obsModeKeywordListPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return obsModeKeywordListPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // obsModeKeywordListPath

  public void obsModeKeywordListPath (String newObsModeKeywordListPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_obsModeKeywordListPath", true);
                $out.write_string (newObsModeKeywordListPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                obsModeKeywordListPath (newObsModeKeywordListPath        );
            } finally {
                _releaseReply ($in);
            }
  } // obsModeKeywordListPath

  public String recipeDictionaryPath ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_recipeDictionaryPath", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return recipeDictionaryPath (        );
            } finally {
                _releaseReply ($in);
            }
  } // recipeDictionaryPath

  public void recipeDictionaryPath (String newRecipeDictionaryPath)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_recipeDictionaryPath", true);
                $out.write_string (newRecipeDictionaryPath);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                recipeDictionaryPath (newRecipeDictionaryPath        );
            } finally {
                _releaseReply ($in);
            }
  } // recipeDictionaryPath

  public String gcsComponent ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_gcsComponent", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return gcsComponent (        );
            } finally {
                _releaseReply ($in);
            }
  } // gcsComponent

  public void gcsComponent (String newGcsComponent)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_gcsComponent", true);
                $out.write_string (newGcsComponent);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                gcsComponent (newGcsComponent        );
            } finally {
                _releaseReply ($in);
            }
  } // gcsComponent

  public String cameraName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_cameraName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return cameraName (        );
            } finally {
                _releaseReply ($in);
            }
  } // cameraName

  public void cameraName (String newCameraName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_cameraName", true);
                $out.write_string (newCameraName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cameraName (newCameraName        );
            } finally {
                _releaseReply ($in);
            }
  } // cameraName

  public DGT.DoubleArray referencePixel ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_referencePixel", true);
                $in = _invoke ($out);
                DGT.DoubleArray $result = DGT.DoubleArrayHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return referencePixel (        );
            } finally {
                _releaseReply ($in);
            }
  } // referencePixel

  public void referencePixel (DGT.DoubleArray newReferencePixel)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_referencePixel", true);
                DGT.DoubleArrayHelper.write ($out, newReferencePixel);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                referencePixel (newReferencePixel        );
            } finally {
                _releaseReply ($in);
            }
  } // referencePixel


  /**
      * Enables the device
      */
  public void enable () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("enable", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                enable (        );
            } finally {
                _releaseReply ($in);
            }
  } // enable


  /**
      * Goes to DISABLE state. Only possible from OFF,ON,IDLE,FAULT
      */
  public void disable () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("disable", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                disable (        );
            } finally {
                _releaseReply ($in);
            }
  } // disable


  /**
      * Starting procedure
      */
  public void start () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("start", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                start (        );
            } finally {
                _releaseReply ($in);
            }
  } // start


  /**
      * Initialization procedure
      */
  public void init () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("init", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                init (        );
            } finally {
                _releaseReply ($in);
            }
  } // init


  /**
      * Halting procedure
      */
  public void halt () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("halt", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                halt (        );
            } finally {
                _releaseReply ($in);
            }
  } // halt


  /**
      * Shutdown procedure
      */
  public void shutdown () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown


  /**
      * Restore previous situation before FAULT
      */
  public void restore () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("restore", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                restore (        );
            } finally {
                _releaseReply ($in);
            }
  } // restore


  /**
      * Stop all activity and goes to FAULT
      */
  public void abort () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("abort", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                abort (        );
            } finally {
                _releaseReply ($in);
            }
  } // abort


  /**
      * Resets the current settings, connections, etc of the Device.
      */
  public void reset () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("reset", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                reset (        );
            } finally {
                _releaseReply ($in);
            }
  } // reset


  /**
      * Performs some kind of test and returns a report about the results.
      */
  public void test () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("test", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                test (        );
            } finally {
                _releaseReply ($in);
            }
  } // test


  /**
      * Sets a configuration by name
      */
  public void configure (String config_name) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("configure", true);
                $out.write_string (config_name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configure (config_name        );
            } finally {
                _releaseReply ($in);
            }
  } // configure


  /**
      * Checks that communication with a Device object is possible via CORBA.
      * In TAO at least, if this method is oneway it only checks for the sanity
      * of the remote ORB, but it does not garantee anything about the concrete 
      * remote object. For this reason the oneway has been removed.
      */
  public void ping () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ping (        );
            } finally {
                _releaseReply ($in);
            }
  } // ping


  /**
      * Returns a text reporting the.
      * @param level (SHORT, FULL, NORMAL) 
      */
  public String report (short level) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("report", true);
                $out.write_short (level);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return report (level        );
            } finally {
                _releaseReply ($in);
            }
  } // report


  /**
      * Returns a text reporting internal implementation details of Device. 
      */
  public String internals () throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("internals", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return internals (        );
            } finally {
                _releaseReply ($in);
            }
  } // internals


  /**
      * To be able to ask for a certain state
      */
  public boolean isOff ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isOff", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isOff (        );
            } finally {
                _releaseReply ($in);
            }
  } // isOff

  public boolean isStarting ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isStarting", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isStarting (        );
            } finally {
                _releaseReply ($in);
            }
  } // isStarting

  public boolean isShuttingDown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isShuttingDown", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isShuttingDown (        );
            } finally {
                _releaseReply ($in);
            }
  } // isShuttingDown

  public boolean isOn ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isOn", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isOn (        );
            } finally {
                _releaseReply ($in);
            }
  } // isOn

  public boolean isInitialising ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isInitialising", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isInitialising (        );
            } finally {
                _releaseReply ($in);
            }
  } // isInitialising

  public boolean isHalting ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isHalting", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isHalting (        );
            } finally {
                _releaseReply ($in);
            }
  } // isHalting

  public boolean isIdle ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isIdle", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isIdle (        );
            } finally {
                _releaseReply ($in);
            }
  } // isIdle

  public boolean isRunning ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isRunning", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isRunning (        );
            } finally {
                _releaseReply ($in);
            }
  } // isRunning

  public boolean isDisabled ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isDisabled", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isDisabled (        );
            } finally {
                _releaseReply ($in);
            }
  } // isDisabled

  public boolean isFault ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isFault", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isFault (        );
            } finally {
                _releaseReply ($in);
            }
  } // isFault

  public boolean isResetting ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isResetting", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isResetting (        );
            } finally {
                _releaseReply ($in);
            }
  } // isResetting


  /**
      * A Device is Ready in IDLE or RUN states. NOT in DISABLED.
      */
  public boolean isReady ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isReady", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isReady (        );
            } finally {
                _releaseReply ($in);
            }
  } // isReady


  /**
      * A Device is configurable in STARTING, ON, IDLE, FAULT
      */
  public boolean isConfigurable ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isConfigurable", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isConfigurable (        );
            } finally {
                _releaseReply ($in);
            }
  } // isConfigurable


  /**
      * A Device is composite if has aggregated Devices
      */
  public boolean isComposite ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isComposite", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isComposite (        );
            } finally {
                _releaseReply ($in);
            }
  } // isComposite


  /**
      * A Device is INtegrated if is connected to the rest of GCS
      */
  public boolean isIntegrated ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isIntegrated", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isIntegrated (        );
            } finally {
                _releaseReply ($in);
            }
  } // isIntegrated


  /**
      * The Device's instance name.
      */
  public String name ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_name", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return name (        );
            } finally {
                _releaseReply ($in);
            }
  } // name


  /**
      * The Device's class name.
      */
  public String className ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_className", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return className (        );
            } finally {
                _releaseReply ($in);
            }
  } // className


  /**
      * The Device's version.
      */
  public String version ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_version", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return version (        );
            } finally {
                _releaseReply ($in);
            }
  } // version


  /**
      * The Device's current state: OFF, ON, STARTING, IDLE, etc.
      */
  public DGT.State_t state ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_state", true);
                $in = _invoke ($out);
                DGT.State_t $result = DGT.State_tHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return state (        );
            } finally {
                _releaseReply ($in);
            }
  } // state


  /**
      * The time when the Device started running.
      */
  public DGT.TimeValue startTime ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_startTime", true);
                $in = _invoke ($out);
                DGT.TimeValue $result = DGT.TimeValueHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return startTime (        );
            } finally {
                _releaseReply ($in);
            }
  } // startTime


  /**
      * The list of monitorable magnitudes names supported by this Device.
      */
  public String[] magnitudes ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_magnitudes", true);
                $in = _invoke ($out);
                String $result[] = DGT.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return magnitudes (        );
            } finally {
                _releaseReply ($in);
            }
  } // magnitudes


  /**
      * The list of property names supported by this Device.
      */
  public String[] properties ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_properties", true);
                $in = _invoke ($out);
                String $result[] = DGT.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return properties (        );
            } finally {
                _releaseReply ($in);
            }
  } // properties


  /**
      * The list of alarm names supported by this Device.
      */
  public String[] alarms ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_alarms", true);
                $in = _invoke ($out);
                String $result[] = DGT.StringListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return alarms (        );
            } finally {
                _releaseReply ($in);
            }
  } // alarms


  /**
      * Get/set as a whole the current Configuration of the Device.
      */
  public CONFIG.Configuration configuration ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_configuration", true);
                $in = _invoke ($out);
                CONFIG.Configuration $result = CONFIG.ConfigurationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return configuration (        );
            } finally {
                _releaseReply ($in);
            }
  } // configuration


  /**
      * Get/set as a whole the current Configuration of the Device.
      */
  public void configuration (CONFIG.Configuration newConfiguration)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_configuration", true);
                CONFIG.ConfigurationHelper.write ($out, newConfiguration);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                configuration (newConfiguration        );
            } finally {
                _releaseReply ($in);
            }
  } // configuration


  /* deprecated */
  public void startDebug ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startDebug", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startDebug (        );
            } finally {
                _releaseReply ($in);
            }
  } // startDebug

  public void stopDebug ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("stopDebug", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                stopDebug (        );
            } finally {
                _releaseReply ($in);
            }
  } // stopDebug

  public void changeMonitorConfiguration (String magnitude, MM.Config config) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeMonitorConfiguration", true);
                $out.write_string (magnitude);
                MM.ConfigHelper.write ($out, config);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                changeMonitorConfiguration (magnitude, config        );
            } finally {
                _releaseReply ($in);
            }
  } // changeMonitorConfiguration

  public void forceSampleData (String magnitude) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("forceSampleData", true);
                $out.write_string (magnitude);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                forceSampleData (magnitude        );
            } finally {
                _releaseReply ($in);
            }
  } // forceSampleData

  public void receiveFrame (DDPKF.Frame frame, int currentWindow, int numWindows, DGT.TinyVector topLeft, DGT.TinyVector bottomRight, DGT.TimeValue timestamp, DGT.TimeValue exposureTime, String cameraId) throws DGT.GCSException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("receiveFrame", true);
                DDPKF.FrameHelper.write ($out, frame);
                $out.write_long (currentWindow);
                $out.write_long (numWindows);
                DGT.TinyVectorHelper.write ($out, topLeft);
                DGT.TinyVectorHelper.write ($out, bottomRight);
                DGT.TimeValueHelper.write ($out, timestamp);
                DGT.TimeValueHelper.write ($out, exposureTime);
                $out.write_string (cameraId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:gtc/DGT/GCSException:1.0"))
                    throw DGT.GCSExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                receiveFrame (frame, currentWindow, numWindows, topLeft, bottomRight, timestamp, exposureTime, cameraId        );
            } finally {
                _releaseReply ($in);
            }
  } // receiveFrame

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gtc/EMIRDFAGENT/EMIRDFAgent_ifce:1.0", 
    "IDL:gtc/DFAGENT/DFAgent_ifce:1.0", 
    "IDL:gtc/DCF/Device_ifce:1.0", 
    "IDL:gtc/MM/Monitor_ifce:1.0", 
    "IDL:gtc/DF/RawFrameReceiver_ifce:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _EMIRDFAgent_ifceStub
