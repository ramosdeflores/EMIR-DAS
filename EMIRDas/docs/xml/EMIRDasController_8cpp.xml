<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.6">
  <compounddef id="EMIRDasController_8cpp" kind="file">
    <compoundname>EMIRDasController.cpp</compoundname>
    <includes local="yes">ace/Log_Msg.h</includes>
    <includes local="yes">ace/OS.h</includes>
    <includes local="yes">ace/High_Res_Timer.h</includes>
    <includes local="yes">ace/Thread.h</includes>
    <includes local="yes">TimeService.h</includes>
    <includes local="yes">ErrorCode.h</includes>
    <includes refid="SDSUsim_8l_2ct__interface_8h" local="yes">../SDSUsim.l/ct_interface.h</includes>
    <includes refid="EMIRDasControllerHw_8h" local="yes">EMIRDasControllerHw.h</includes>
    <includes refid="EMIRDasFrame_8h" local="yes">EMIRDasFrame.h</includes>
    <includes refid="SimpleMemoryManager_8h" local="yes">SimpleMemoryManager.h</includes>
    <includes refid="SimpleStorageManager_8h" local="yes">SimpleStorageManager.h</includes>
    <includes refid="EMIRDasController_8h" local="yes">EMIRDasController.h</includes>
    <incdepgraph>
      <node id="1151">
        <label>ace/OS.h</label>
      </node>
      <node id="1157">
        <label>EMIRDasControllerHw.h</label>
        <link refid="EMIRDasControllerHw_8h"/>
        <childnode refid="1158" relation="include">
        </childnode>
        <childnode refid="1159" relation="include">
        </childnode>
        <childnode refid="1160" relation="include">
        </childnode>
        <childnode refid="1162" relation="include">
        </childnode>
      </node>
      <node id="1155">
        <label>ErrorCode.h</label>
      </node>
      <node id="1171">
        <label>RawFrameReceiverC.h</label>
      </node>
      <node id="1167">
        <label>ace/Semaphore.h</label>
      </node>
      <node id="1159">
        <label>stdlib.h</label>
      </node>
      <node id="1169">
        <label>SimpleStorageManager.h</label>
        <link refid="SimpleStorageManager_8h"/>
        <childnode refid="1158" relation="include">
        </childnode>
        <childnode refid="1170" relation="include">
        </childnode>
        <childnode refid="1171" relation="include">
        </childnode>
        <childnode refid="1172" relation="include">
        </childnode>
        <childnode refid="1173" relation="include">
        </childnode>
        <childnode refid="1174" relation="include">
        </childnode>
        <childnode refid="1175" relation="include">
        </childnode>
        <childnode refid="1176" relation="include">
        </childnode>
        <childnode refid="1163" relation="include">
        </childnode>
      </node>
      <node id="1176">
        <label>IDL_Adapters_DPKF.h</label>
      </node>
      <node id="1162">
        <label>EMIRDasConf.h</label>
        <link refid="EMIRDasConf_8h"/>
        <childnode refid="1159" relation="include">
        </childnode>
      </node>
      <node id="1153">
        <label>ace/Thread.h</label>
      </node>
      <node id="1164">
        <label>TimeValue.h</label>
      </node>
      <node id="1161">
        <label>string</label>
      </node>
      <node id="1158">
        <label>Trace.h</label>
      </node>
      <node id="1150">
        <label>ace/Log_Msg.h</label>
      </node>
      <node id="1178">
        <label>ace/Thread_Manager.h</label>
      </node>
      <node id="1154">
        <label>TimeService.h</label>
      </node>
      <node id="1168">
        <label>ace/Synch.h</label>
      </node>
      <node id="1170">
        <label>GCSException.h</label>
      </node>
      <node id="1160">
        <label>DetectorControllerApp.h</label>
        <link refid="DetectorControllerApp_8h"/>
        <childnode refid="1161" relation="include">
        </childnode>
        <childnode refid="1158" relation="include">
        </childnode>
      </node>
      <node id="1149">
        <label>EMIRDasController.cpp</label>
        <link refid="EMIRDasController.cpp"/>
        <childnode refid="1150" relation="include">
        </childnode>
        <childnode refid="1151" relation="include">
        </childnode>
        <childnode refid="1152" relation="include">
        </childnode>
        <childnode refid="1153" relation="include">
        </childnode>
        <childnode refid="1154" relation="include">
        </childnode>
        <childnode refid="1155" relation="include">
        </childnode>
        <childnode refid="1156" relation="include">
        </childnode>
        <childnode refid="1157" relation="include">
        </childnode>
        <childnode refid="1163" relation="include">
        </childnode>
        <childnode refid="1165" relation="include">
        </childnode>
        <childnode refid="1169" relation="include">
        </childnode>
        <childnode refid="1177" relation="include">
        </childnode>
      </node>
      <node id="1174">
        <label>CORBARef.h</label>
      </node>
      <node id="1165">
        <label>SimpleMemoryManager.h</label>
        <link refid="SimpleMemoryManager_8h"/>
        <childnode refid="1166" relation="include">
        </childnode>
        <childnode refid="1167" relation="include">
        </childnode>
        <childnode refid="1168" relation="include">
        </childnode>
        <childnode refid="1158" relation="include">
        </childnode>
      </node>
      <node id="1152">
        <label>ace/High_Res_Timer.h</label>
      </node>
      <node id="1156">
        <label>../SDSUsim.l/ct_interface.h</label>
        <link refid="SDSUsim_8l_2ct__interface_8h"/>
      </node>
      <node id="1177">
        <label>EMIRDasController.h</label>
        <link refid="EMIRDasController_8h"/>
        <childnode refid="1159" relation="include">
        </childnode>
        <childnode refid="1154" relation="include">
        </childnode>
        <childnode refid="1165" relation="include">
        </childnode>
        <childnode refid="1157" relation="include">
        </childnode>
        <childnode refid="1162" relation="include">
        </childnode>
        <childnode refid="1178" relation="include">
        </childnode>
      </node>
      <node id="1172">
        <label>GCSTypes.h</label>
      </node>
      <node id="1163">
        <label>EMIRDasFrame.h</label>
        <link refid="EMIRDasFrame_8h"/>
        <childnode refid="1164" relation="include">
        </childnode>
      </node>
      <node id="1166">
        <label>ace/Mutex.h</label>
      </node>
      <node id="1175">
        <label>IDL_Adapters_DGT.h</label>
      </node>
      <node id="1173">
        <label>Frame.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="EMIRDasController_8cpp_15c806da59879c51f17f1041febdc2056" prot="public" static="no">
        <name>CPLUS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="10" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="EMIRDasController_8cpp_1a2ac54564b3514084afd2c5dafe9d232" prot="public" static="no">
        <name>POOL_SIZE</name>
        <initializer>40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="138" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="EMIRDasController_8cpp_12f183eaedbad0b7767b478cf97d2a67c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runStorageManager</definition>
        <argsstring>(SimpleMemoryManager *memMng)</argsstring>
        <name>runStorageManager</name>
        <param>
          <type><ref refid="classSimpleMemoryManager" kindref="compound">SimpleMemoryManager</ref> *</type>
          <declname>memMng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="35" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="35" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="EMIRDasController_8cpp_1c656725e166b8c805d5353eaf3b0e7f5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool storageThreadRunning</definition>
        <argsstring></argsstring>
        <name>storageThreadRunning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="25" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int storageOps</definition>
        <argsstring></argsstring>
        <name>storageOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="26" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="EMIRDasController_8cpp_1b10d055646154a16759f99a873381bbf" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string frameDir</definition>
        <argsstring></argsstring>
        <name>frameDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="27" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="EMIRDasController_8cpp_1d2778d85ce6368749a5eae3264047cc1" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string dataFactoryName</definition>
        <argsstring></argsstring>
        <name>dataFactoryName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" line="28" bodyfile="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2006<sp/>Instituto<sp/>de<sp/>Astrofisica<sp/>de<sp/>Canarias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ace/Log_Msg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ace/OS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ace/High_Res_Timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ace/Thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TimeService.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ErrorCode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CPLUS</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>VXWORKS</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;msgQLib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../SDSUlcu.l/ct_interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../SDSUlcu.l/sdsu_emir_driver.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sdsu_init(),<sp/>sdsu_cleanup()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;../SDSUsim.l/ct_interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EMIRDasControllerHw_8h" kindref="compound">EMIRDasControllerHw.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EMIRDasFrame_8h" kindref="compound">EMIRDasFrame.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SimpleMemoryManager_8h" kindref="compound">SimpleMemoryManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SimpleStorageManager_8h" kindref="compound">SimpleStorageManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EMIRDasController_8h" kindref="compound">EMIRDasController.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="EMIRDasController_8cpp_1c656725e166b8c805d5353eaf3b0e7f5" kindref="member">storageThreadRunning</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" kindref="member">storageOps</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">string<sp/><ref refid="EMIRDasController_8cpp_1b10d055646154a16759f99a873381bbf" kindref="member">frameDir</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">string<sp/><ref refid="EMIRDasController_8cpp_1d2778d85ce6368749a5eae3264047cc1" kindref="member">dataFactoryName</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VXWORKS</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="EMIRDasController_8cpp_12f183eaedbad0b7767b478cf97d2a67c" kindref="member">runStorageManager</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memoryManager)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="classSimpleMemoryManager" kindref="compound">SimpleMemoryManager</ref><sp/>*memMng;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>memMng<sp/>=<sp/>(<ref refid="classSimpleMemoryManager" kindref="compound">SimpleMemoryManager</ref><sp/>*)memoryManager;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="EMIRDasController_8cpp_12f183eaedbad0b7767b478cf97d2a67c" kindref="member">runStorageManager</ref>(<ref refid="classSimpleMemoryManager" kindref="compound">SimpleMemoryManager</ref><sp/>*memMng)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="structEMIRFrame" kindref="compound">EMIRFrame</ref><sp/>*<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classSimpleStorageManager" kindref="compound">SimpleStorageManager</ref><sp/>stMng;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="EMIRDasController_8cpp_1c656725e166b8c805d5353eaf3b0e7f5" kindref="member">storageThreadRunning</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;runStorageMamanger<sp/>-<sp/>Thread<sp/>started&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stMng.<ref refid="classSimpleStorageManager_1f180d856ade9d40baf616dde167f0878" kindref="member">initFrame</ref>(<ref refid="EMIRDasController_8cpp_1d2778d85ce6368749a5eae3264047cc1" kindref="member">dataFactoryName</ref>,<sp/><ref refid="EMIRDasController_8cpp_1b10d055646154a16759f99a873381bbf" kindref="member">frameDir</ref>)<sp/>==<sp/>DAS::OPERATION_OK<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="EMIRDasController_8cpp_1c656725e166b8c805d5353eaf3b0e7f5" kindref="member">storageThreadRunning</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;runStorageMamanger<sp/>-<sp/>waiting<sp/>for<sp/>a<sp/>buffer&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memMng-&gt;waitForFull();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref><sp/>=<sp/>(<ref refid="structEMIRFrame" kindref="compound">EMIRFrame</ref><sp/>*)memMng-&gt;getFullBuffer(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;runStorageMamanger<sp/>-<sp/>saving<sp/>buffer&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref><sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;runStorageMamanger<sp/>-<sp/>Got<sp/>it<sp/>wrong<sp/>out&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stMng.<ref refid="classSimpleStorageManager_17df5cad0b8ca44089e723964aa0298c4" kindref="member">sendFrame</ref>(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>,<sp/><ref refid="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" kindref="member">storageOps</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memMng-&gt;putFreeBuffer(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memMng-&gt;putFreeBuffer(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storageThreadRunning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;runStorageMamanger<sp/>-<sp/>Bailing<sp/>out&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATIONFAILED;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="classEMIRDasController_1c1071c3fc072ad93985337bab9f3b578" kindref="member">EMIRDasController::EMIRDasController</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>imgStorageDir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>powerOn,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>acquisitionApp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>powerOff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>dataFactory)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classEMIRDasController_1590228bb19129db6b3abb3f9a83ee719" kindref="member">trace_</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Trace(</highlight><highlight class="stringliteral">&quot;EMIRDasController&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>created_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>aborting_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>imgDir<sp/>=<sp/>imgStorageDir;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="EMIRDasController_8cpp_1d2778d85ce6368749a5eae3264047cc1" kindref="member">dataFactoryName</ref><sp/>=<sp/>dataFactory;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>powOn<sp/>=<sp/>powerOn;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>acqApp<sp/>=<sp/>acquisitionApp;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>powOff<sp/>=<sp/>powerOff;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>dchardwarefacade_=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasControllerHw" kindref="compound">EMIRDasControllerHw</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="classEMIRDasController_1e2500f58d3cd53504cb5fc34d95a63d1" kindref="member">EMIRDasController::~EMIRDasController</ref>()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_14e88713b462e25dee99d4215e56cb692" kindref="member">EMIRDasController::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_1b056ad124471e4738c0d9c18795cb01d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_104fdeacefcd578b195d548f1e6fefa07" kindref="member">EMIRDasController::test</ref>()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_184a2c200dce96885a3693fea3c88f5dc" kindref="member">EMIRDasController::halt</ref>()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDDasController::shutdown()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_14aff08e58b47c13925681c790136891c" kindref="member">shutdown</ref>(powOff);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_1f07a5a5c57fa768add28bb5dd68608a9" kindref="member">EMIRDasController::shutdown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDDasController::shutdown()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::shutdown()<sp/>-<sp/>Waiting<sp/>for<sp/>queue<sp/>to<sp/>empry&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>memoryManager-&gt;waitForEmpty();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::shutdown()<sp/>-<sp/>destroying<sp/>thread&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VXWORKS</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>taskDelete(threadId_);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ACE_Thread::cancel(threadId_);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::shutdown()<sp/>-<sp/>destroying<sp/>memory<sp/>manager&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>memoryManager;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POOL_SIZE<sp/><sp/><sp/>40</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_1cab75709be10b0f884aa7bdf2fdd5c6c" kindref="member">EMIRDasController::start</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendFrame)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>size_t<sp/>sizeofData;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="structEMIRFrame" kindref="compound">EMIRFrame</ref><sp/>*<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::start()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="SDSUlcu_8l_2ct__interface_8h_12a456d41a1149f353e9fb428bd0ef6d5" kindref="member">copen</ref>(</highlight><highlight class="stringliteral">&quot;sdsu<sp/>controller&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDDasController::start()<sp/>-<sp/>copen<sp/>failed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>NoSpace<sp/>ex(</highlight><highlight class="stringliteral">&quot;EMIRDasController::start&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;copen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::start()<sp/>-<sp/>copen<sp/>OK&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="SDSUlcu_8l_2ct__interface_8h_1c0689e0cb236f78a0d48447a43f609c1" kindref="member">fgopen</ref>(</highlight><highlight class="stringliteral">&quot;sdsu<sp/>frame<sp/>grabber&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDDasController::start()<sp/>-<sp/>fgopen<sp/>failed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="SDSUlcu_8l_2ct__interface_8h_1904279b18abec3c0affb82786648c1a9" kindref="member">cclose</ref>(0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>NoSpace<sp/>ex(</highlight><highlight class="stringliteral">&quot;EMIRDasController::start&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;fgopen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::start()<sp/>-<sp/>fgopen<sp/>OK&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>memory<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController<sp/>-<sp/>Creating<sp/>Memory<sp/>Manager&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>memory<sp/>manager<sp/>with<sp/>POOL_SIZE<sp/>empty<sp/>slots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>memoryManager<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSimpleMemoryManager" kindref="compound">SimpleMemoryManager</ref>(0,<sp/><ref refid="EMIRDasController_8cpp_1a2ac54564b3514084afd2c5dafe9d232" kindref="member">POOL_SIZE</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::bad_alloc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>NoSpace<sp/>ex(</highlight><highlight class="stringliteral">&quot;EMIRDasController::start&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;SimpleMemoryManager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>memory<sp/>manager<sp/>with<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="EMIRDasController_8cpp_1a2ac54564b3514084afd2c5dafe9d232" kindref="member">POOL_SIZE</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memoryManager-&gt;getFreeBuffer(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref><sp/>=<sp/>(<ref refid="structEMIRFrame" kindref="compound">EMIRFrame</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structEMIRFrame" kindref="compound">EMIRFrame</ref>));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;DetectorData<sp/>=<sp/>(<ref refid="EMIRDasFrame_8h_1bc743ce126c3ada10501baffb3ca2295" kindref="member">INT16</ref><sp/>*)memalign(<ref refid="SimpleMemoryManager_8cpp_1e1b66b8df68990d8784a19666686d063" kindref="member">SDSU_BURST_BLOCK</ref>,<sp/><ref refid="EMIRDasFrame_8h_1b61ea9d1e0596ea2a04fe31a60bbb24e" kindref="member">DETECTOR_SIZE</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="EMIRDasFrame_8h_1bc743ce126c3ada10501baffb3ca2295" kindref="member">INT16</ref>)<sp/>+<sp/><ref refid="EMIRDasFrame_8h_1d31fa9a36b40ed56e7677aa70c8b93f1" kindref="member">SDSU_HEADER_SIZE</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memoryManager-&gt;putFullBuffer(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memoryManager-&gt;waitForFull();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memoryManager-&gt;putFreeBuffer(memoryManager-&gt;getFullBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>storage<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController<sp/>-<sp/>Creating<sp/>Storage<sp/>Manager&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" kindref="member">storageOps</ref><sp/>=<sp/><ref refid="SimpleStorageManager_8h_1e4b8463cdd61cdc280dd90d024bc1c11" kindref="member">INVER</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="EMIRDasController_8cpp_1b10d055646154a16759f99a873381bbf" kindref="member">frameDir</ref><sp/>=<sp/>imgDir;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="EMIRDasController_8cpp_1b10d055646154a16759f99a873381bbf" kindref="member">frameDir</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;NONE&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" kindref="member">storageOps</ref><sp/>|=<sp/><ref refid="SimpleStorageManager_8h_1d8abdebbc12dc650825a6c2d1b46cc22" kindref="member">MAKEFITS</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sendFrame<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EMIRDasController_8cpp_15de1db5d3b03a4d12407792c844bc17e" kindref="member">storageOps</ref><sp/>|=<sp/><ref refid="SimpleStorageManager_8h_1d6e0adedb830fcb0415d6d32ee127ec3" kindref="member">SENDFRAME</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VXWORKS</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>threadId_<sp/>=<sp/>taskSpawn(</highlight><highlight class="stringliteral">&quot;storeFrame&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>0,<sp/>10000,<sp/>(FUNCPTR)<ref refid="EMIRDasController_8cpp_12f183eaedbad0b7767b478cf97d2a67c" kindref="member">runStorageManager</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)memoryManager,0,0,0,0,0,0,0,0,0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ACE_Thread::spawn((ACE_THR_FUNC)runStorageManager,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)memoryManager,THR_NEW_LWP,<sp/>(ACE_thread_t<sp/>*)&amp;threadId_);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDDasController<sp/>-<sp/>ERROR<sp/>CREATING<sp/>THREAD&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>memoryManager;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NoSpace<sp/>ex(</highlight><highlight class="stringliteral">&quot;EMIRDasController::start&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;SimpleStorageManager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ex;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>sleep(5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Load<sp/>and<sp/>execute<sp/>the<sp/>power<sp/>on<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_1975b87e8f56180e263e8b1eaefa91194" kindref="member">EMIRDasController::init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::init()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_1b056ad124471e4738c0d9c18795cb01d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_15bfad9f1136136a9d39d11149e77db67" kindref="member">init</ref>(powOn,<sp/>acqApp);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::init()<sp/>-<sp/><sp/>Unable<sp/>to<sp/>init<sp/>SDSU<sp/>Controller-<sp/>Unknown<sp/>Exception<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>EMIRDasController::config(const<sp/>EMIRDas::AcquisitionConfiguration<sp/>&amp;<sp/>acqparameters)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_13cc1efbd1d45ffd7499bb7a2c04a0a14" kindref="member">EMIRDasController::config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structAcqConfig" kindref="compound">AcqConfig</ref><sp/>&amp;<sp/>acqparameters)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::config()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_1a3f0332ffd6c1cbfb12a76e8617f3b39" kindref="member">config</ref>(acqparameters);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::config()<sp/>-<sp/><sp/>Unable<sp/>to<sp/>config<sp/>SDSU<sp/>Controller-<sp/>Unknown<sp/>Exception<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Synchronous<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>cancels<sp/>a<sp/><sp/>read<sp/>experimental<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_102a82e1fc1e01899fd0a71203a305da7" kindref="member">EMIRDasController::abort</ref>()<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::abort()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>aborting_<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>continuereadexperimental_<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dchardwarefacade_-&gt;abort();</highlight></codeline>
<codeline lineno="257"><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(result<sp/>!=<sp/>DAS::OPERATION_OK)</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;##EMIRDasController::abort::FAULT<sp/>because<sp/>SDSUController<sp/>fails_&quot;</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>evinfo_<sp/>-&gt;sendEvent(AbortedDC);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="classEMIRDasController_1a2091be19a1833fc54527b080dfe3e84" kindref="member">EMIRDasController::report</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::report()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>ostrstream<sp/>ost(dev_reply_,<sp/>DEVICE_REPORT_SIZE_);</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>memset(dev_reply_,<sp/>0,<sp/>DEVICE_REPORT_SIZE_);</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>Report<sp/><sp/>EMIR<sp/>##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(dchardwarefacade_<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>dchardwarefacade_-&gt;report(level)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>&quot;<sp/>SDSU<sp/>Controller<sp/>value<sp/>null&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(aborting_)</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>&quot;<sp/>Aborting<sp/>TRUE&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>&quot;<sp/>Aborting<sp/>FALSE&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(dev_reply_);</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>IOCardDriver<sp/>*<sp/>driver<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_1ff956348e8954957d4601fa500d623ba" kindref="member">EMIRDasController::check</ref>()<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::check()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Writes<sp/>and<sp/>reads<sp/>back<sp/>a<sp/>set<sp/>of<sp/>values<sp/>from<sp/>the<sp/>controller</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>dchardwarefacade_-&gt;check();</highlight></codeline>
<codeline lineno="299"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EMIRDasController::readDetector(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpFrame,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter,<sp/><ref refid="structAcqConfig" kindref="compound">AcqConfig</ref><sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>EMIRFrame<sp/>*<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*readMem;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dropFrame<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>TimeValue<sp/>utc;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>003##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>free<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref><sp/>=<sp/>(EMIRFrame<sp/>*)memoryManager-&gt;getFreeBuffer(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>DROP<sp/>004##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>dropFrame<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="SDSUlcu_8l_2ct__interface_8h_1ea784b8df04465e35756163cfb4b59cc" kindref="member">fgread</ref>(<ref refid="SDSUlcu_8l_2ct__interface_8h_17e3e78059ab51258ce05f37aa47645cb" kindref="member">FRAME_GRABBER</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)dumpFrame,<sp/><ref refid="EMIRDasFrame_8h_1e26b0a7f2ca5ca79827e7858f80461a2" kindref="member">SDSU_TOTAL_SIZE</ref>)<sp/>!=<sp/><ref refid="EMIRDasFrame_8h_1e26b0a7f2ca5ca79827e7858f80461a2" kindref="member">SDSU_TOTAL_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose:<sp/>ERROR<sp/>READING<sp/>FRAME<sp/>FROM<sp/>CONTROLLER&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose:<sp/>WARNING<sp/>-<sp/>FRAME<sp/>LOST&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose:<sp/>PANIC<sp/>-<sp/>FIRST<sp/>FRAME<sp/>LOST&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>header<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;imageName,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>params.<ref refid="structAcqConfig_129405c416fc8ed94b8d9272578ed395e" kindref="member">title</ref>.c_str());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;readoutmodeval<sp/>=<sp/>(int)params.<ref refid="structAcqConfig_1ce24164cfdbc2632bc920122bc894266" kindref="member">readoutmodeval</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;exposuretime<sp/>=<sp/>params.<ref refid="structAcqConfig_160f4af9647028054c3af0ad5bcadbe6f" kindref="member">exposuretime</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;x_size<sp/>=<sp/>params.<ref refid="structAcqConfig_1adbdf4d98c845ab81709d68c1e6dab88" kindref="member">x_size</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;y_size<sp/>=<sp/>params.<ref refid="structAcqConfig_1d21131ef3e30130010d22d63a5d8e735" kindref="member">y_size</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;windowMode<sp/>=<sp/>params.<ref refid="structAcqConfig_124857a2ab3c65ced9ef2c84a6e0b8e36" kindref="member">windowMode</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nsec<sp/>=<sp/>params.<ref refid="structAcqConfig_1c44793e66617edae53251ef6fdf54785" kindref="member">nsec</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;optrst<sp/>=<sp/>params.<ref refid="structAcqConfig_10db4974bcafed07072455dabb1a653e6" kindref="member">optrst</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nrst<sp/>=<sp/>params.<ref refid="structAcqConfig_1cb16056966164b5b1e6db1991f912b5c" kindref="member">nrst</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nrdbl<sp/>=<sp/>params.<ref refid="structAcqConfig_1e57bdb446ad38a3a2ea3e9b55b60c1e5" kindref="member">nrdbl</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nrdbl_nd<sp/>=<sp/>params.<ref refid="structAcqConfig_16468a428f6c3de68a19b39076e4e76d4" kindref="member">nrdbl_nd</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nrdil<sp/>=<sp/>params.<ref refid="structAcqConfig_1d9f67468389eaea7f34b4ec98fe2526e" kindref="member">nrdil</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nrdil_nd<sp/>=<sp/>params.<ref refid="structAcqConfig_176fe76edb4aaec1bb8234a74e3eb39f5" kindref="member">nrdil_nd</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;numExp<sp/>=<sp/>params.<ref refid="structAcqConfig_1c823a4ee8dd006c207335ddc051b1228" kindref="member">numExp</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;nparam_x<sp/>=<sp/>params.<ref refid="structAcqConfig_1096e2737bb8546f3c5f5bdb709b7bd38" kindref="member">nparam_x</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;currentFrame<sp/>=<sp/>iter;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>utc<sp/>=<sp/>TimeService::getTAI()<sp/>-<sp/>TimeService::TAI_UTCOffset;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;timeStamp<sp/>=<sp/>utc.sec();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>004##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>detector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="SDSUlcu_8l_2ct__interface_8h_1ea784b8df04465e35756163cfb4b59cc" kindref="member">fgread</ref>(<ref refid="SDSUlcu_8l_2ct__interface_8h_17e3e78059ab51258ce05f37aa47645cb" kindref="member">FRAME_GRABBER</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>-&gt;DetectorData,<sp/><ref refid="EMIRDasFrame_8h_1e26b0a7f2ca5ca79827e7858f80461a2" kindref="member">SDSU_TOTAL_SIZE</ref>)<sp/>!=<sp/><ref refid="EMIRDasFrame_8h_1e26b0a7f2ca5ca79827e7858f80461a2" kindref="member">SDSU_TOTAL_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose:<sp/>ERROR<sp/>READING<sp/>FRAME<sp/>FROM<sp/>CONTROLLER&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memoryManager-&gt;putFullBuffer((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>005##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>frame<sp/>in<sp/>the<sp/>storage<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>memoryManager-&gt;putFullBuffer((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<ref refid="ui_8cpp_1bd93ff6adc8cd42c959e4814c6f6758c" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>006##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>mother<sp/>of<sp/>all<sp/>the<sp/>module<sp/>functions:<sp/>get<sp/>the<sp/>data<sp/>from<sp/>the<sp/>detector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classEMIRDasController_169a2f98b7be1b055556481806e949879" kindref="member">EMIRDasController::expose</ref>(<ref refid="structAcqConfig" kindref="compound">AcqConfig</ref><sp/>&amp;<sp/>acqparameters)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lostFrames<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0,<sp/>result;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dumpFrame;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;EMIRDDasController::expose()&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>detector<sp/>for<sp/>the<sp/>current<sp/>acqusition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(result<sp/>=<sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_1a3f0332ffd6c1cbfb12a76e8617f3b39" kindref="member">config</ref>(acqparameters))<sp/>!=<sp/>DAS::OPERATION_OK)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose()<sp/>-<sp/><sp/>Unable<sp/>to<sp/>read<sp/>from<sp/>SDSU<sp/>-<sp/>Unknown<sp/>Exception<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>that<sp/>will<sp/>be<sp/>generated<sp/>by<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>acqparameters.<ref refid="structAcqConfig_19941e8b0b6253db18cab45b10fcdf796" kindref="member">numReads</ref><sp/>=<sp/>acqparameters.<ref refid="structAcqConfig_1c44793e66617edae53251ef6fdf54785" kindref="member">nsec</ref><sp/>*<sp/>(<sp/>((acqparameters.<ref refid="structAcqConfig_10db4974bcafed07072455dabb1a653e6" kindref="member">optrst</ref><sp/>&amp;<sp/>2)<sp/>?<sp/>acqparameters.<ref refid="structAcqConfig_1cb16056966164b5b1e6db1991f912b5c" kindref="member">nrst</ref><sp/>:<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acqparameters.<ref refid="structAcqConfig_1e57bdb446ad38a3a2ea3e9b55b60c1e5" kindref="member">nrdbl</ref><sp/>+<sp/>acqparameters.<ref refid="structAcqConfig_1c823a4ee8dd006c207335ddc051b1228" kindref="member">numExp</ref><sp/>*<sp/>acqparameters.<ref refid="structAcqConfig_1d9f67468389eaea7f34b4ec98fe2526e" kindref="member">nrdil</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;*****<sp/>Reading<sp/>%d<sp/>frames.\n&quot;</highlight><highlight class="normal">,<sp/>acqparameters.<ref refid="structAcqConfig_19941e8b0b6253db18cab45b10fcdf796" kindref="member">numReads</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>to<sp/>drop<sp/>a<sp/>frame,<sp/>this<sp/>is<sp/>the<sp/>buffer<sp/>to<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dumpFrame<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)memalign(<ref refid="SimpleMemoryManager_8cpp_1e1b66b8df68990d8784a19666686d063" kindref="member">SDSU_BURST_BLOCK</ref>,<sp/><ref refid="EMIRDasFrame_8h_1b61ea9d1e0596ea2a04fe31a60bbb24e" kindref="member">DETECTOR_SIZE</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(INT16)<sp/>+<sp/><ref refid="EMIRDasFrame_8h_1d31fa9a36b40ed56e7677aa70c8b93f1" kindref="member">SDSU_HEADER_SIZE</ref>))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose:<sp/>ERROR<sp/>ALLOCTING<sp/>MEMORY<sp/>FOR<sp/>BUFFER&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATIONFAILED;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose()<sp/>-<sp/><sp/>Unable<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>detector<sp/>-<sp/>Unknown<sp/>Exception<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>controller<sp/>to<sp/>start<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dchardwarefacade_-&gt;<ref refid="classEMIRDasControllerHw_13da77ed698433c42b5f1745d62dd26fd" kindref="member">startRead</ref>()<sp/>!=<sp/>DAS::OPERATION_OK<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose()<sp/>-<sp/>ERROR<sp/>executing<sp/>controller<sp/>code<sp/>!!!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATIONFAILED;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>001##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i0<sp/>=<sp/>0;<sp/>i0<sp/>&lt;<sp/>acqparameters.<ref refid="structAcqConfig_19941e8b0b6253db18cab45b10fcdf796" kindref="member">numReads</ref>;<sp/>++i0)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>002##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>readDetector(dumpFrame,<sp/>i0,<sp/>acqparameters);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>result<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lostFrames<sp/>+=<sp/>result;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>DROP<sp/>COUNT<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>lostFrames<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>FREE<sp/>002##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(dumpFrame);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATIONFAILED;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>007##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>storageThreadRunning<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EMIRDasController::expose()<sp/>-<sp/><sp/>Storage<sp/>thread<sp/>is<sp/>dead<sp/>...<sp/>long<sp/>live<sp/>the<sp/>thread<sp/>!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATIONFAILED;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>008##&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>free(dumpFrame);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&gt;<sp/><sp/>EMIRDasController<sp/>Frames<sp/>droped<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>lostFrames<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DAS::OPERATION_OK;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/gcs/plopez/src_c++/gtc/AL/ECM/EMIR/DAS/EMIRDas/EMIRDasController.l/EMIRDasController.cpp"/>
  </compounddef>
</doxygen>
